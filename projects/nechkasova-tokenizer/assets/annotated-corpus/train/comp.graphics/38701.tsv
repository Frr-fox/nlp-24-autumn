from	from	from
:	:	:
spl@dim.ucsd.edu	spl@dim.ucsd.edu	spl@dim.ucsd.edu
(	(	(
steve	steve	steve
lamont	lamont	lamont
)	)	)

subject	subject	subject
:	:	:
re	re	re
:	:	:
finding	find	finding
equally	equal	equally
spaced	space	spaced
points	point	point
on	on	on
a	a	a
sphere	sphere	sphere
.	.	.

organization	organ	organization
:	:	:
university	univers	university
of	of	of
calif	calif	calif
.	.	.
,	,	,
san	san	san
diego	diego	diego
/	/	/
microscopy	microscopi	microscopy
and	and	and
imaging	imag	imaging
resource	resourc	resource

lines	line	line
:	:	:
326	326	326

nntp	nntp	nntp
-	-	-
posting	post	posting
-	-	-
host	host	host
:	:	:
dim	dim	dim
.	.	.
ucsd	ucsd	ucsd
.	.	.
edu	edu	edu

in	in	in
article	articl	article
<	<	<
4615trd@rpi.edu	4615trd@rpi.edu	4615trd@rpi.edu
>	>	>
deweeset@ptolemy2.rdrc.rpi.edu	deweeset@ptolemy2.rdrc.rpi.edu	deweeset@ptolemy2.rdrc.rpi.edu
(	(	(
thomas	thoma	thomas
e	e	e
.	.	.

deweese	dewees	deweese
)	)	)
writes	write	writes
:	:	:

>	>	>
hello	hello	hello
,	,	,
i	i	i
know	know	know
that	that	that
this	this	this
has	has	ha
been	been	been
discussed	discuss	discussed
before	befor	before
.	.	.

but	but	but
at	at	at
the	the	the
time	time	time

>	>	>
i	i	i
didn	didn	didn
'	'	'
t	t	t
need	need	need
to	to	to
teselate	tesel	teselate
a	a	a
sphere	sphere	sphere
.	.	.

so	so	so
if	if	if
any	ani	any
kind	kind	kind
soul	soul	soul
has	has	ha
the	the	the
code	code	code

>	>	>
or	or	or
the	the	the
alg	alg	alg
,	,	,
that	that	that
was	was	wa
finally	final	finally
decided	decid	decided
upon	upon	upon
as	as	a
the	the	the
best	best	best
(	(	(
as	as	a
i	i	i
recall	recal	recall
it	it	it

>	>	>
was	was	wa
a	a	a
nice	nice	nice
,	,	,
iterative	iter	iterative
subdivision	subdivis	subdivision
meathod	meathod	meathod
)	)	)
,	,	,
i	i	i
would	would	would
be	be	be
very	veri	very

>	>	>
appreciative	appreci	appreciative
.	.	.

here	here	here
is	is	is
one	one	one
by	by	by
andrew	andrew	andrew
"	"	"
graphics	graphic	graphic
gems	gem	gem
"	"	"
glassner	glassner	glassner
that	that	that
i	i	i
got	got	got
from	from	from
a	a	a
collegue	collegu	collegue
of	of	of
mine	mine	mine
.	.	.

i	i	i
think	think	think
i	i	i
fiddled	fiddl	fiddled
with	with	with
it	it	it
a	a	a
little	littl	little
bit	bit	bit
to	to	to
make	make	make
it	it	it
deal	deal	deal
with	with	with
whatever	whatev	whatever
bizarre	bizarr	bizarre
problem	problem	problem
i	i	i
was	was	wa
working	work	working
on	on	on
at	at	at
the	the	the
time	time	time
but	but	but
it	it	it
is	is	is
known	known	known
to	to	to
work	work	work
.	.	.

spl	spl	spl

-	-	-
-	-	-
-	-	-
-	-	-

/	/	/
*	*	*
spheres	sphere	sphere

asg	asg	asg
9	9	9
feb	feb	feb
85	85	85

spl	spl	spl
thu	thu	thu
mar	mar	mar
8	8	8
17	17	17
:	:	:
17	17	17
:	:	:
40	40	40
est	est	est
1990	1990	1990

*	*	*
/	/	/

#	#	#
include	includ	include
<	<	<
stdio	stdio	stdio
.	.	.
h	h	h
>	>	>

#	#	#
include	includ	include
<	<	<
math	math	math
.	.	.
h	h	h
>	>	>

#	#	#
define	defin	define
pi	pi	pi
3	3	3
.	.	.
141592654	141592654	141592654

struct	struct	struct
point_struct	point_struct	point_struct
{	{	{

double	doubl	double
x	x	x
,	,	,
y	y	y
,	,	,
z	z	z
;	;	;

}	}	}
;	;	;

static	static	static
double	doubl	double
radius	radius	radius
;	;	;
static	static	static
double	doubl	double
xorg	xorg	xorg
;	;	;
static	static	static
double	doubl	double
yorg	yorg	yorg
;	;	;
static	static	static
double	doubl	double
zorg	zorg	zorg
;	;	;

do_sphere	do_spher	do_sphere
(	(	(
r	r	r
,	,	,
freq	freq	freq
,	,	,
x	x	x
,	,	,
y	y	y
,	,	,
z	z	z
)	)	)

double	doubl	double
r	r	r
;	;	;

int	int	int
freq	freq	freq
;	;	;

double	doubl	double
x	x	x
;	;	;

double	doubl	double
y	y	y
;	;	;

double	doubl	double
z	z	z
;	;	;

{	{	{

int	int	int
pole	pole	pole
;	;	;

double	doubl	double
northy	northi	northy
,	,	,
southy	southi	southy
,	,	,
poley	poley	poley
;	;	;

double	doubl	double
rtheta	rtheta	rtheta
,	,	,
rtheta2	rtheta2	rtheta2
,	,	,
ntheta	ntheta	ntheta
,	,	,
ntheta2	ntheta2	ntheta2
,	,	,
magicangle	magicangl	magicangle
;	;	;

double	doubl	double
theta	theta	theta
,	,	,
thetastart	thetastart	thetastart
,	,	,
thisy	thisi	thisy
,	,	,
den	den	den
,	,	,
t	t	t
;	;	;

struct	struct	struct
point_node	point_nod	point_node
*	*	*
pnp	pnp	pnp
;	;	;

struct	struct	struct
point_struct	point_struct	point_struct
p1	p1	p1
,	,	,
p2	p2	p2
,	,	,
p3	p3	p3
,	,	,
p4	p4	p4
,	,	,
n1	n1	n1
,	,	,
n2	n2	n2
,	,	,
n3	n3	n3
,	,	,
n4	n4	n4
,	,	,
pt	pt	pt
;	;	;

radius	radius	radius
=	=	=
r	r	r
;	;	;

xorg	xorg	xorg
=	=	=
x	x	x
;	;	;

yorg	yorg	yorg
=	=	=
y	y	y
;	;	;

zorg	zorg	zorg
=	=	=
z	z	z
;	;	;

/	/	/
*	*	*
north	north	north
pole	pole	pole
*	*	*
/	/	/

magicangle	magicangl	magicangle
=	=	=
30	30	30
.	.	.
0	0	0
*	*	*
pi	pi	pi
/	/	/
180	180	180
.	.	.
0	0	0
;	;	;

northy	northi	northy
=	=	=
radius	radius	radius
*	*	*
sin	sin	sin
(	(	(
magicangle	magicangl	magicangle
)	)	)
;	;	;

southy	southi	southy
=	=	=
-	-	-
radius	radius	radius
*	*	*
sin	sin	sin
(	(	(
magicangle	magicangl	magicangle
)	)	)
;	;	;

for	for	for
(	(	(
pole	pole	pole
=	=	=
0	0	0
;	;	;
pole	pole	pole
<	<	<
2	2	2
;	;	;
pole	pole	pole
+	+	+
+	+	+
)	)	)
{	{	{

if	if	if
(	(	(
pole	pole	pole
=	=	=
=	=	=
0	0	0
)	)	)
{	{	{

poley	poley	poley
=	=	=
radius	radius	radius
;	;	;

thisy	thisi	thisy
=	=	=
northy	northi	northy
;	;	;

thetastart	thetastart	thetastart
=	=	=
0	0	0
.	.	.
0	0	0
;	;	;

}	}	}

else	els	else
{	{	{

poley	poley	poley
=	=	=
-	-	-
radius	radius	radius
;	;	;

thisy	thisi	thisy
=	=	=
southy	southi	southy
;	;	;

thetastart	thetastart	thetastart
=	=	=
36	36	36
.	.	.
0	0	0
;	;	;

}	}	}

for	for	for
(	(	(
theta	theta	theta
=	=	=
thetastart	thetastart	thetastart
;	;	;
theta	theta	theta
<	<	<
360	360	360
.	.	.
0	0	0
;	;	;
theta	theta	theta
+	+	+
=	=	=
60	60	60
.	.	.
0	0	0
)	)	)
{	{	{

rtheta	rtheta	rtheta
=	=	=
theta	theta	theta
*	*	*
pi	pi	pi
/	/	/
180	180	180
.	.	.
0	0	0
;	;	;

rtheta2	rtheta2	rtheta2
=	=	=
(	(	(
theta	theta	theta
+	+	+
60	60	60
.	.	.
0	0	0
)	)	)
*	*	*
pi	pi	pi
/	/	/
180	180	180
.	.	.
0	0	0
;	;	;

p1	p1	p1
.	.	.
x	x	x
=	=	=
0	0	0
.	.	.
0	0	0
;	;	;

p1	p1	p1
.	.	.
y	y	y
=	=	=
poley	poley	poley
;	;	;

p1	p1	p1
.	.	.
z	z	z
=	=	=
0	0	0
.	.	.
0	0	0
;	;	;

p2	p2	p2
.	.	.
x	x	x
=	=	=
radius	radius	radius
*	*	*
cos	cos	co
(	(	(
rtheta	rtheta	rtheta
)	)	)
;	;	;

p2	p2	p2
.	.	.
y	y	y
=	=	=
thisy	thisi	thisy
;	;	;

p2	p2	p2
.	.	.
z	z	z
=	=	=
radius	radius	radius
*	*	*
sin	sin	sin
(	(	(
rtheta	rtheta	rtheta
)	)	)
;	;	;

p3	p3	p3
.	.	.
x	x	x
=	=	=
radius	radius	radius
*	*	*
cos	cos	co
(	(	(
rtheta2	rtheta2	rtheta2
)	)	)
;	;	;

p3	p3	p3
.	.	.
y	y	y
=	=	=
thisy	thisi	thisy
;	;	;

p3	p3	p3
.	.	.
z	z	z
=	=	=
radius	radius	radius
*	*	*
sin	sin	sin
(	(	(
rtheta2	rtheta2	rtheta2
)	)	)
;	;	;

if	if	if
(	(	(
pole	pole	pole
=	=	=
=	=	=
0	0	0
)	)	)
{	{	{

/	/	/
*	*	*
make	make	make
ring	ring	ring
go	go	go
the	the	the
other	other	other
way	way	way
so	so	so
normals	normal	normal
are	are	are
right	right	right
*	*	*
/	/	/

pt	pt	pt
.	.	.
x	x	x
=	=	=
p3	p3	p3
.	.	.
x	x	x
;	;	;

pt	pt	pt
.	.	.
y	y	y
=	=	=
p3	p3	p3
.	.	.
y	y	y
;	;	;

pt	pt	pt
.	.	.
z	z	z
=	=	=
p3	p3	p3
.	.	.
z	z	z
;	;	;

p3	p3	p3
.	.	.
x	x	x
=	=	=
p2	p2	p2
.	.	.
x	x	x
;	;	;

p3	p3	p3
.	.	.
y	y	y
=	=	=
p2	p2	p2
.	.	.
y	y	y
;	;	;

p3	p3	p3
.	.	.
z	z	z
=	=	=
p2	p2	p2
.	.	.
z	z	z
;	;	;

p2	p2	p2
.	.	.
x	x	x
=	=	=
pt	pt	pt
.	.	.
x	x	x
;	;	;

p2	p2	p2
.	.	.
y	y	y
=	=	=
pt	pt	pt
.	.	.
y	y	y
;	;	;

p2	p2	p2
.	.	.
z	z	z
=	=	=
pt	pt	pt
.	.	.
z	z	z
;	;	;

}	}	}

den	den	den
=	=	=
(	(	(
p1	p1	p1
.	.	.
x	x	x
*	*	*
p1	p1	p1
.	.	.
x	x	x
)	)	)
+	+	+
(	(	(
p1	p1	p1
.	.	.
y	y	y
*	*	*
p1	p1	p1
.	.	.
y	y	y
)	)	)
+	+	+
(	(	(
p1	p1	p1
.	.	.
z	z	z
*	*	*
p1	p1	p1
.	.	.
z	z	z
)	)	)
;	;	;

den	den	den
=	=	=
sqrt	sqrt	sqrt
(	(	(
den	den	den
)	)	)
;	;	;

if	if	if
(	(	(
den	den	den
!	!	!
=	=	=
0	0	0
.	.	.
0	0	0
)	)	)
{	{	{

t	t	t
=	=	=
radius	radius	radius
/	/	/
den	den	den
;	;	;

p1	p1	p1
.	.	.
x	x	x
*	*	*
=	=	=
t	t	t
;	;	;

p1	p1	p1
.	.	.
y	y	y
*	*	*
=	=	=
t	t	t
;	;	;

p1	p1	p1
.	.	.
z	z	z
*	*	*
=	=	=
t	t	t
;	;	;

}	}	}

den	den	den
=	=	=
(	(	(
p2	p2	p2
.	.	.
x	x	x
*	*	*
p2	p2	p2
.	.	.
x	x	x
)	)	)
+	+	+
(	(	(
p2	p2	p2
.	.	.
y	y	y
*	*	*
p2	p2	p2
.	.	.
y	y	y
)	)	)
+	+	+
(	(	(
p2	p2	p2
.	.	.
z	z	z
*	*	*
p2	p2	p2
.	.	.
z	z	z
)	)	)
;	;	;

den	den	den
=	=	=
sqrt	sqrt	sqrt
(	(	(
den	den	den
)	)	)
;	;	;

if	if	if
(	(	(
den	den	den
!	!	!
=	=	=
0	0	0
.	.	.
0	0	0
)	)	)
{	{	{

t	t	t
=	=	=
radius	radius	radius
/	/	/
den	den	den
;	;	;

p2	p2	p2
.	.	.
x	x	x
*	*	*
=	=	=
t	t	t
;	;	;

p2	p2	p2
.	.	.
y	y	y
*	*	*
=	=	=
t	t	t
;	;	;

p2	p2	p2
.	.	.
z	z	z
*	*	*
=	=	=
t	t	t
;	;	;

}	}	}

den	den	den
=	=	=
(	(	(
p3	p3	p3
.	.	.
x	x	x
*	*	*
p3	p3	p3
.	.	.
x	x	x
)	)	)
+	+	+
(	(	(
p3	p3	p3
.	.	.
y	y	y
*	*	*
p3	p3	p3
.	.	.
y	y	y
)	)	)
+	+	+
(	(	(
p3	p3	p3
.	.	.
z	z	z
*	*	*
p3	p3	p3
.	.	.
z	z	z
)	)	)
;	;	;

den	den	den
=	=	=
sqrt	sqrt	sqrt
(	(	(
den	den	den
)	)	)
;	;	;

if	if	if
(	(	(
den	den	den
!	!	!
=	=	=
0	0	0
.	.	.
0	0	0
)	)	)
{	{	{

t	t	t
=	=	=
radius	radius	radius
/	/	/
den	den	den
;	;	;

p3	p3	p3
.	.	.
x	x	x
*	*	*
=	=	=
t	t	t
;	;	;

p3	p3	p3
.	.	.
y	y	y
*	*	*
=	=	=
t	t	t
;	;	;

p3	p3	p3
.	.	.
z	z	z
*	*	*
=	=	=
t	t	t
;	;	;

}	}	}

subdivide_tri	subdivide_tri	subdivide_tri
(	(	(
&	&	&
p1	p1	p1
,	,	,
&	&	&
p2	p2	p2
,	,	,
&	&	&
p3	p3	p3
,	,	,
freq	freq	freq
)	)	)
;	;	;

}	}	}

}	}	}

/	/	/
*	*	*
now	now	now
the	the	the
body	bodi	body
*	*	*
/	/	/

for	for	for
(	(	(
theta	theta	theta
=	=	=
0	0	0
.	.	.
0	0	0
;	;	;
theta	theta	theta
<	<	<
360	360	360
.	.	.
0	0	0
;	;	;
theta	theta	theta
+	+	+
=	=	=
60	60	60
.	.	.
0	0	0
)	)	)
{	{	{

rtheta	rtheta	rtheta
=	=	=
theta	theta	theta
*	*	*
pi	pi	pi
/	/	/
180	180	180
.	.	.
0	0	0
;	;	;

rtheta2	rtheta2	rtheta2
=	=	=
(	(	(
theta	theta	theta
+	+	+
60	60	60
.	.	.
0	0	0
)	)	)
*	*	*
pi	pi	pi
/	/	/
180	180	180
.	.	.
0	0	0
;	;	;

ntheta	ntheta	ntheta
=	=	=
(	(	(
theta	theta	theta
+	+	+
36	36	36
.	.	.
0	0	0
)	)	)
*	*	*
pi	pi	pi
/	/	/
180	180	180
.	.	.
0	0	0
;	;	;

ntheta2	ntheta2	ntheta2
=	=	=
(	(	(
theta	theta	theta
+	+	+
96	96	96
.	.	.
0	0	0
)	)	)
*	*	*
pi	pi	pi
/	/	/
180	180	180
.	.	.
0	0	0
;	;	;

p1	p1	p1
.	.	.
x	x	x
=	=	=
radius	radius	radius
*	*	*
cos	cos	co
(	(	(
rtheta	rtheta	rtheta
)	)	)
;	;	;

p1	p1	p1
.	.	.
y	y	y
=	=	=
northy	northi	northy
;	;	;

p1	p1	p1
.	.	.
z	z	z
=	=	=
radius	radius	radius
*	*	*
sin	sin	sin
(	(	(
rtheta	rtheta	rtheta
)	)	)
;	;	;

p2	p2	p2
.	.	.
x	x	x
=	=	=
radius	radius	radius
*	*	*
cos	cos	co
(	(	(
rtheta2	rtheta2	rtheta2
)	)	)
;	;	;

p2	p2	p2
.	.	.
y	y	y
=	=	=
northy	northi	northy
;	;	;

p2	p2	p2
.	.	.
z	z	z
=	=	=
radius	radius	radius
*	*	*
sin	sin	sin
(	(	(
rtheta2	rtheta2	rtheta2
)	)	)
;	;	;

p3	p3	p3
.	.	.
x	x	x
=	=	=
radius	radius	radius
*	*	*
cos	cos	co
(	(	(
ntheta	ntheta	ntheta
)	)	)
;	;	;

p3	p3	p3
.	.	.
y	y	y
=	=	=
southy	southi	southy
;	;	;

p3	p3	p3
.	.	.
z	z	z
=	=	=
radius	radius	radius
*	*	*
sin	sin	sin
(	(	(
ntheta	ntheta	ntheta
)	)	)
;	;	;

p4	p4	p4
.	.	.
x	x	x
=	=	=
radius	radius	radius
*	*	*
cos	cos	co
(	(	(
ntheta2	ntheta2	ntheta2
)	)	)
;	;	;

p4	p4	p4
.	.	.
y	y	y
=	=	=
southy	southi	southy
;	;	;

p4	p4	p4
.	.	.
z	z	z
=	=	=
radius	radius	radius
*	*	*
sin	sin	sin
(	(	(
ntheta2	ntheta2	ntheta2
)	)	)
;	;	;

den	den	den
=	=	=
(	(	(
p1	p1	p1
.	.	.
x	x	x
*	*	*
p1	p1	p1
.	.	.
x	x	x
)	)	)
+	+	+
(	(	(
p1	p1	p1
.	.	.
y	y	y
*	*	*
p1	p1	p1
.	.	.
y	y	y
)	)	)
+	+	+
(	(	(
p1	p1	p1
.	.	.
z	z	z
*	*	*
p1	p1	p1
.	.	.
z	z	z
)	)	)
;	;	;

den	den	den
=	=	=
sqrt	sqrt	sqrt
(	(	(
den	den	den
)	)	)
;	;	;

if	if	if
(	(	(
den	den	den
!	!	!
=	=	=
0	0	0
.	.	.
0	0	0
)	)	)
{	{	{

t	t	t
=	=	=
radius	radius	radius
/	/	/
den	den	den
;	;	;

p1	p1	p1
.	.	.
x	x	x
*	*	*
=	=	=
t	t	t
;	;	;

p1	p1	p1
.	.	.
y	y	y
*	*	*
=	=	=
t	t	t
;	;	;

p1	p1	p1
.	.	.
z	z	z
*	*	*
=	=	=
t	t	t
;	;	;

}	}	}

den	den	den
=	=	=
(	(	(
p2	p2	p2
.	.	.
x	x	x
*	*	*
p2	p2	p2
.	.	.
x	x	x
)	)	)
+	+	+
(	(	(
p2	p2	p2
.	.	.
y	y	y
*	*	*
p2	p2	p2
.	.	.
y	y	y
)	)	)
+	+	+
(	(	(
p2	p2	p2
.	.	.
z	z	z
*	*	*
p2	p2	p2
.	.	.
z	z	z
)	)	)
;	;	;

den	den	den
=	=	=
sqrt	sqrt	sqrt
(	(	(
den	den	den
)	)	)
;	;	;

if	if	if
(	(	(
den	den	den
!	!	!
=	=	=
0	0	0
.	.	.
0	0	0
)	)	)
{	{	{

t	t	t
=	=	=
radius	radius	radius
/	/	/
den	den	den
;	;	;

p2	p2	p2
.	.	.
x	x	x
*	*	*
=	=	=
t	t	t
;	;	;

p2	p2	p2
.	.	.
y	y	y
*	*	*
=	=	=
t	t	t
;	;	;

p2	p2	p2
.	.	.
z	z	z
*	*	*
=	=	=
t	t	t
;	;	;

}	}	}

den	den	den
=	=	=
(	(	(
p3	p3	p3
.	.	.
x	x	x
*	*	*
p3	p3	p3
.	.	.
x	x	x
)	)	)
+	+	+
(	(	(
p3	p3	p3
.	.	.
y	y	y
*	*	*
p3	p3	p3
.	.	.
y	y	y
)	)	)
+	+	+
(	(	(
p3	p3	p3
.	.	.
z	z	z
*	*	*
p3	p3	p3
.	.	.
z	z	z
)	)	)
;	;	;

den	den	den
=	=	=
sqrt	sqrt	sqrt
(	(	(
den	den	den
)	)	)
;	;	;

if	if	if
(	(	(
den	den	den
!	!	!
=	=	=
0	0	0
.	.	.
0	0	0
)	)	)
{	{	{

t	t	t
=	=	=
radius	radius	radius
/	/	/
den	den	den
;	;	;

p3	p3	p3
.	.	.
x	x	x
*	*	*
=	=	=
t	t	t
;	;	;

p3	p3	p3
.	.	.
y	y	y
*	*	*
=	=	=
t	t	t
;	;	;

p3	p3	p3
.	.	.
z	z	z
*	*	*
=	=	=
t	t	t
;	;	;

}	}	}

den	den	den
=	=	=
(	(	(
p4	p4	p4
.	.	.
x	x	x
*	*	*
p4	p4	p4
.	.	.
x	x	x
)	)	)
+	+	+
(	(	(
p4	p4	p4
.	.	.
y	y	y
*	*	*
p4	p4	p4
.	.	.
y	y	y
)	)	)
+	+	+
(	(	(
p4	p4	p4
.	.	.
z	z	z
*	*	*
p4	p4	p4
.	.	.
z	z	z
)	)	)
;	;	;

den	den	den
=	=	=
sqrt	sqrt	sqrt
(	(	(
den	den	den
)	)	)
;	;	;

if	if	if
(	(	(
den	den	den
!	!	!
=	=	=
0	0	0
.	.	.
0	0	0
)	)	)
{	{	{

t	t	t
=	=	=
radius	radius	radius
/	/	/
den	den	den
;	;	;

p4	p4	p4
.	.	.
x	x	x
*	*	*
=	=	=
t	t	t
;	;	;

p4	p4	p4
.	.	.
y	y	y
*	*	*
=	=	=
t	t	t
;	;	;

p4	p4	p4
.	.	.
z	z	z
*	*	*
=	=	=
t	t	t
;	;	;

}	}	}

subdivide_tri	subdivide_tri	subdivide_tri
(	(	(
&	&	&
p1	p1	p1
,	,	,
&	&	&
p2	p2	p2
,	,	,
&	&	&
p3	p3	p3
,	,	,
freq	freq	freq
)	)	)
;	;	;

subdivide_tri	subdivide_tri	subdivide_tri
(	(	(
&	&	&
p3	p3	p3
,	,	,
&	&	&
p2	p2	p2
,	,	,
&	&	&
p4	p4	p4
,	,	,
freq	freq	freq
)	)	)
;	;	;

}	}	}

return	return	return
;	;	;

}	}	}

#	#	#
define	defin	define
norm_pt	norm_pt	norm_pt
(	(	(
v	v	v
)	)	)
{	{	{
register	regist	register
double	doubl	double
r	r	r
=	=	=
sqrt	sqrt	sqrt
(	(	(
(	(	(
(	(	(
v	v	v
)	)	)
-	-	-
>	>	>
x	x	x
*	*	*
(	(	(
v	v	v
)	)	)
-	-	-
>	>	>
x	x	x
)	)	)
+	+	+
\	\	\

(	(	(
(	(	(
v	v	v
)	)	)
-	-	-
>	>	>
y	y	y
*	*	*
(	(	(
v	v	v
)	)	)
-	-	-
>	>	>
y	y	y
)	)	)
+	+	+
\	\	\

(	(	(
(	(	(
v	v	v
)	)	)
-	-	-
>	>	>
z	z	z
*	*	*
(	(	(
v	v	v
)	)	)
-	-	-
>	>	>
z	z	z
)	)	)
)	)	)
;	;	;
\	\	\

(	(	(
v	v	v
)	)	)
-	-	-
>	>	>
x	x	x
/	/	/
=	=	=
r	r	r
;	;	;
\	\	\

(	(	(
v	v	v
)	)	)
-	-	-
>	>	>
y	y	y
/	/	/
=	=	=
r	r	r
;	;	;
\	\	\

(	(	(
v	v	v
)	)	)
-	-	-
>	>	>
z	z	z
/	/	/
=	=	=
r	r	r
;	;	;
\	\	\

}	}	}

subdivide_tri	subdivide_tri	subdivide_tri
(	(	(
p1	p1	p1
,	,	,
p2	p2	p2
,	,	,
p3	p3	p3
,	,	,
a	a	a
)	)	)

struct	struct	struct
point_struct	point_struct	point_struct
*	*	*
p1	p1	p1
,	,	,
*	*	*
p2	p2	p2
,	,	,
*	*	*
p3	p3	p3
;	;	;

int	int	int
a	a	a
;	;	;

{	{	{

struct	struct	struct
point_struct	point_struct	point_struct
n1	n1	n1
,	,	,
n2	n2	n2
,	,	,
n3	n3	n3
;	;	;

struct	struct	struct
point_struct	point_struct	point_struct
p12	p12	p12
,	,	,
p13	p13	p13
,	,	,
p23	p23	p23
;	;	;

double	doubl	double
den	den	den
,	,	,
t	t	t
;	;	;

if	if	if
(	(	(
a	a	a
>	>	>
0	0	0
)	)	)
{	{	{

p12	p12	p12
.	.	.
x	x	x
=	=	=
(	(	(
p1	p1	p1
-	-	-
>	>	>
x	x	x
+	+	+
p2	p2	p2
-	-	-
>	>	>
x	x	x
)	)	)
/	/	/
2	2	2
.	.	.
0	0	0
;	;	;

p12	p12	p12
.	.	.
y	y	y
=	=	=
(	(	(
p1	p1	p1
-	-	-
>	>	>
y	y	y
+	+	+
p2	p2	p2
-	-	-
>	>	>
y	y	y
)	)	)
/	/	/
2	2	2
.	.	.
0	0	0
;	;	;

p12	p12	p12
.	.	.
z	z	z
=	=	=
(	(	(
p1	p1	p1
-	-	-
>	>	>
z	z	z
+	+	+
p2	p2	p2
-	-	-
>	>	>
z	z	z
)	)	)
/	/	/
2	2	2
.	.	.
0	0	0
;	;	;

den	den	den
=	=	=
(	(	(
p12	p12	p12
.	.	.
x	x	x
*	*	*
p12	p12	p12
.	.	.
x	x	x
)	)	)
+	+	+
(	(	(
p12	p12	p12
.	.	.
y	y	y
*	*	*
p12	p12	p12
.	.	.
y	y	y
)	)	)
+	+	+
(	(	(
p12	p12	p12
.	.	.
z	z	z
*	*	*
p12	p12	p12
.	.	.
z	z	z
)	)	)
;	;	;

den	den	den
=	=	=
sqrt	sqrt	sqrt
(	(	(
den	den	den
)	)	)
;	;	;

if	if	if
(	(	(
den	den	den
!	!	!
=	=	=
0	0	0
.	.	.
0	0	0
)	)	)
{	{	{

t	t	t
=	=	=
radius	radius	radius
/	/	/
den	den	den
;	;	;

p12	p12	p12
.	.	.
x	x	x
*	*	*
=	=	=
t	t	t
;	;	;

p12	p12	p12
.	.	.
y	y	y
*	*	*
=	=	=
t	t	t
;	;	;

p12	p12	p12
.	.	.
z	z	z
*	*	*
=	=	=
t	t	t
;	;	;

}	}	}

p13	p13	p13
.	.	.
x	x	x
=	=	=
(	(	(
p1	p1	p1
-	-	-
>	>	>
x	x	x
+	+	+
p3	p3	p3
-	-	-
>	>	>
x	x	x
)	)	)
/	/	/
2	2	2
.	.	.
0	0	0
;	;	;

p13	p13	p13
.	.	.
y	y	y
=	=	=
(	(	(
p1	p1	p1
-	-	-
>	>	>
y	y	y
+	+	+
p3	p3	p3
-	-	-
>	>	>
y	y	y
)	)	)
/	/	/
2	2	2
.	.	.
0	0	0
;	;	;

p13	p13	p13
.	.	.
z	z	z
=	=	=
(	(	(
p1	p1	p1
-	-	-
>	>	>
z	z	z
+	+	+
p3	p3	p3
-	-	-
>	>	>
z	z	z
)	)	)
/	/	/
2	2	2
.	.	.
0	0	0
;	;	;

den	den	den
=	=	=
(	(	(
p13	p13	p13
.	.	.
x	x	x
*	*	*
p13	p13	p13
.	.	.
x	x	x
)	)	)
+	+	+
(	(	(
p13	p13	p13
.	.	.
y	y	y
*	*	*
p13	p13	p13
.	.	.
y	y	y
)	)	)
+	+	+
(	(	(
p13	p13	p13
.	.	.
z	z	z
*	*	*
p13	p13	p13
.	.	.
z	z	z
)	)	)
;	;	;

den	den	den
=	=	=
sqrt	sqrt	sqrt
(	(	(
den	den	den
)	)	)
;	;	;

if	if	if
(	(	(
den	den	den
!	!	!
=	=	=
0	0	0
.	.	.
0	0	0
)	)	)
{	{	{

t	t	t
=	=	=
radius	radius	radius
/	/	/
den	den	den
;	;	;

p13	p13	p13
.	.	.
x	x	x
*	*	*
=	=	=
t	t	t
;	;	;

p13	p13	p13
.	.	.
y	y	y
*	*	*
=	=	=
t	t	t
;	;	;

p13	p13	p13
.	.	.
z	z	z
*	*	*
=	=	=
t	t	t
;	;	;

}	}	}

p23	p23	p23
.	.	.
x	x	x
=	=	=
(	(	(
p2	p2	p2
-	-	-
>	>	>
x	x	x
+	+	+
p3	p3	p3
-	-	-
>	>	>
x	x	x
)	)	)
/	/	/
2	2	2
.	.	.
0	0	0
;	;	;

p23	p23	p23
.	.	.
y	y	y
=	=	=
(	(	(
p2	p2	p2
-	-	-
>	>	>
y	y	y
+	+	+
p3	p3	p3
-	-	-
>	>	>
y	y	y
)	)	)
/	/	/
2	2	2
.	.	.
0	0	0
;	;	;

p23	p23	p23
.	.	.
z	z	z
=	=	=
(	(	(
p2	p2	p2
-	-	-
>	>	>
z	z	z
+	+	+
p3	p3	p3
-	-	-
>	>	>
z	z	z
)	)	)
/	/	/
2	2	2
.	.	.
0	0	0
;	;	;

den	den	den
=	=	=
(	(	(
p23	p23	p23
.	.	.
x	x	x
*	*	*
p23	p23	p23
.	.	.
x	x	x
)	)	)
+	+	+
(	(	(
p23	p23	p23
.	.	.
y	y	y
*	*	*
p23	p23	p23
.	.	.
y	y	y
)	)	)
+	+	+
(	(	(
p23	p23	p23
.	.	.
z	z	z
*	*	*
p23	p23	p23
.	.	.
z	z	z
)	)	)
;	;	;

den	den	den
=	=	=
sqrt	sqrt	sqrt
(	(	(
den	den	den
)	)	)
;	;	;

if	if	if
(	(	(
den	den	den
!	!	!
=	=	=
0	0	0
.	.	.
0	0	0
)	)	)
{	{	{

t	t	t
=	=	=
radius	radius	radius
/	/	/
den	den	den
;	;	;

p23	p23	p23
.	.	.
x	x	x
*	*	*
=	=	=
t	t	t
;	;	;

p23	p23	p23
.	.	.
y	y	y
*	*	*
=	=	=
t	t	t
;	;	;

p23	p23	p23
.	.	.
z	z	z
*	*	*
=	=	=
t	t	t
;	;	;

}	}	}

subdivide_tri	subdivide_tri	subdivide_tri
(	(	(
p1	p1	p1
,	,	,
&	&	&
p12	p12	p12
,	,	,
&	&	&
p13	p13	p13
,	,	,
a	a	a
-	-	-
1	1	1
)	)	)
;	;	;

subdivide_tri	subdivide_tri	subdivide_tri
(	(	(
&	&	&
p12	p12	p12
,	,	,
p2	p2	p2
,	,	,
&	&	&
p23	p23	p23
,	,	,
a	a	a
-	-	-
1	1	1
)	)	)
;	;	;

subdivide_tri	subdivide_tri	subdivide_tri
(	(	(
&	&	&
p13	p13	p13
,	,	,
&	&	&
p23	p23	p23
,	,	,
p3	p3	p3
,	,	,
a	a	a
-	-	-
1	1	1
)	)	)
;	;	;

subdivide_tri	subdivide_tri	subdivide_tri
(	(	(
&	&	&
p12	p12	p12
,	,	,
&	&	&
p23	p23	p23
,	,	,
&	&	&
p13	p13	p13
,	,	,
a	a	a
-	-	-
1	1	1
)	)	)
;	;	;

}	}	}
else	els	else
{	{	{

n1	n1	n1
.	.	.
x	x	x
=	=	=
p1	p1	p1
-	-	-
>	>	>
x	x	x
;	;	;

n1	n1	n1
.	.	.
y	y	y
=	=	=
p1	p1	p1
-	-	-
>	>	>
y	y	y
;	;	;

n1	n1	n1
.	.	.
z	z	z
=	=	=
p1	p1	p1
-	-	-
>	>	>
z	z	z
;	;	;

norm_pt	norm_pt	norm_pt
(	(	(
&	&	&
n1	n1	n1
)	)	)
;	;	;

n2	n2	n2
.	.	.
x	x	x
=	=	=
p2	p2	p2
-	-	-
>	>	>
x	x	x
;	;	;

n2	n2	n2
.	.	.
y	y	y
=	=	=
p2	p2	p2
-	-	-
>	>	>
y	y	y
;	;	;

n2	n2	n2
.	.	.
z	z	z
=	=	=
p2	p2	p2
-	-	-
>	>	>
z	z	z
;	;	;

norm_pt	norm_pt	norm_pt
(	(	(
&	&	&
n2	n2	n2
)	)	)
;	;	;

n3	n3	n3
.	.	.
x	x	x
=	=	=
p3	p3	p3
-	-	-
>	>	>
x	x	x
;	;	;

n3	n3	n3
.	.	.
y	y	y
=	=	=
p3	p3	p3
-	-	-
>	>	>
y	y	y
;	;	;

n3	n3	n3
.	.	.
z	z	z
=	=	=
p3	p3	p3
-	-	-
>	>	>
z	z	z
;	;	;

norm_pt	norm_pt	norm_pt
(	(	(
&	&	&
n3	n3	n3
)	)	)
;	;	;

/	/	/
*	*	*
nothing	noth	nothing
special	special	special
about	about	about
this	this	this
poly	poli	poly
*	*	*
/	/	/

printf	printf	printf
(	(	(
"	"	"
%	%	%
f	f	f
%	%	%
f	f	f
%	%	%
f	f	f
%	%	%
f	f	f
%	%	%
f	f	f
%	%	%
f	f	f
\	\	\
n	n	n
"	"	"
,	,	,
p1	p1	p1
-	-	-
>	>	>
x	x	x
+	+	+
xorg	xorg	xorg
,	,	,
p1	p1	p1
-	-	-
>	>	>
y	y	y
+	+	+
yorg	yorg	yorg
,	,	,
p1	p1	p1
-	-	-
>	>	>
z	z	z
+	+	+
zorg	zorg	zorg
,	,	,
n1	n1	n1
.	.	.
x	x	x
,	,	,
n1	n1	n1
.	.	.
y	y	y
,	,	,
n1	n1	n1
.	.	.
z	z	z
)	)	)
;	;	;

printf	printf	printf
(	(	(
"	"	"
%	%	%
f	f	f
%	%	%
f	f	f
%	%	%
f	f	f
%	%	%
f	f	f
%	%	%
f	f	f
%	%	%
f	f	f
\	\	\
n	n	n
"	"	"
,	,	,
p2	p2	p2
-	-	-
>	>	>
x	x	x
+	+	+
xorg	xorg	xorg
,	,	,
p2	p2	p2
-	-	-
>	>	>
y	y	y
+	+	+
yorg	yorg	yorg
,	,	,
p2	p2	p2
-	-	-
>	>	>
z	z	z
+	+	+
zorg	zorg	zorg
,	,	,
n2	n2	n2
.	.	.
x	x	x
,	,	,
n2	n2	n2
.	.	.
y	y	y
,	,	,
n2	n2	n2
.	.	.
z	z	z
)	)	)
;	;	;

printf	printf	printf
(	(	(
"	"	"
%	%	%
f	f	f
%	%	%
f	f	f
%	%	%
f	f	f
%	%	%
f	f	f
%	%	%
f	f	f
%	%	%
f	f	f
\	\	\
n	n	n
"	"	"
,	,	,
p3	p3	p3
-	-	-
>	>	>
x	x	x
+	+	+
xorg	xorg	xorg
,	,	,
p3	p3	p3
-	-	-
>	>	>
y	y	y
+	+	+
yorg	yorg	yorg
,	,	,
p3	p3	p3
-	-	-
>	>	>
z	z	z
+	+	+
zorg	zorg	zorg
,	,	,
n3	n3	n3
.	.	.
x	x	x
,	,	,
n3	n3	n3
.	.	.
y	y	y
,	,	,
n3	n3	n3
.	.	.
z	z	z
)	)	)
;	;	;

}	}	}

return	return	return
;	;	;

}	}	}

-	-	-
-	-	-
steve	steve	steve
lamont	lamont	lamont
,	,	,
sciviguy	sciviguy	sciviguy
-	-	-
-	-	-
(	(	(
619) 534-7968	619) 534-7968	619) 534-7968
-	-	-
-	-	-
spl@szechuan.ucsd.edu	spl@szechuan.ucsd.edu	spl@szechuan.ucsd.edu
san	san	san
diego	diego	diego
microscopy	microscopi	microscopy
and	and	and
imaging	imag	imaging
resource	resourc	resource
/	/	/
uc	uc	uc
san	san	san
diego	diego	diego
/	/	/
la	la	la
jolla	jolla	jolla
,	,	,
ca	ca	ca
92093-0608	92093-0608	92093-0608

"	"	"
my	my	my
other	other	other
car	car	car
is	is	is
a	a	a
car	car	car
,	,	,
too	too	too
.	.	.
"	"	"

-	-	-
bumper	bumper	bumper
strip	strip	strip
seen	seen	seen
on	on	on
i	i	i
-	-	-
805	805	805