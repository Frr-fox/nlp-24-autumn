from	from	from
:	:	:
ninassup@athena.mit.edu	ninassup@athena.mit.edu	ninassup@athena.mit.edu
(	(	(
nikos	niko	nikos
i	i	i
nassuphis	nassuphi	nassuphis
)	)	)

subject	subject	subject
:	:	:
lga	lga	lga
ncrypt	ncrypt	ncrypt
source	sourc	source

organization	organ	organization
:	:	:
massachusetts	massachusett	massachusetts
institute	institut	institute
of	of	of
technology	technolog	technology

lines	line	line
:	:	:
1135	1135	1135

nntp	nntp	nntp
-	-	-
posting	post	posting
-	-	-
host	host	host
:	:	:
w20	w20	w20
-	-	-
575	575	575
-	-	-
104	104	104
.	.	.
mit	mit	mit
.	.	.
edu	edu	edu

i	i	i
got	got	got
a	a	a
number	number	number
of	of	of
requests	request	request
for	for	for
code	code	code
.	.	.

so	so	so
,	,	,
here	here	here
it	it	it
is	is	is
.	.	.

its	it	it
written	written	written
in	in	in
80x86	80x86	80x86
asm	asm	asm
.	.	.

borland	borland	borland
tasm	tasm	tasm
will	will	will
do	do	do
.	.	.

tasm	tasm	tasm
lga	lga	lga
.	.	.
asm	asm	asm
tlink	tlink	tlink
/	/	/
t	t	t
lga	lga	lga
.	.	.
asm	asm	asm

the	the	the
code	code	code
:	:	:

;	;	;
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-

;	;	;
lga	lga	lga
ncryption	ncryption	ncryption

;	;	;
(	(	(
c	c	c
)	)	)
by	by	by
nick	nick	nick
nassuphis	nassuphi	nassuphis

;	;	;
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-

code	code	code
segment	segment	segment

assume	assum	assume
cs	cs	c
:	:	:
code	code	code
,	,	,
ds	ds	d
:	:	:
code	code	code

org	org	org
100h	100h	100h

start	start	start
:	:	:

jmp	jmp	jmp
begin	begin	begin

;	;	;
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-

;	;	;

;	;	;
gas	gas	gas
particle	particl	particle
assigment	assig	assigment
:	:	:

;	;	;

;	;	;
bit	bit	bit
0	0	0
particle	particl	particle
moving	move	moving
east	east	east

;	;	;
bit	bit	bit
1	1	1
particle	particl	particle
moving	move	moving
west	west	west

;	;	;
bit	bit	bit
2	2	2
particle	particl	particle
moving	move	moving
north	north	north

;	;	;
bit	bit	bit
3	3	3
particle	particl	particle
moving	move	moving
south	south	south

;	;	;

;	;	;
bit	bit	bit
4	4	4
particle	particl	particle
moving	move	moving
east	east	east

;	;	;
bit	bit	bit
5	5	5
particle	particl	particle
moving	move	moving
west	west	west

;	;	;
bit	bit	bit
6	6	6
particle	particl	particle
moving	move	moving
north	north	north

;	;	;
bit	bit	bit
7	7	7
particle	particl	particle
moving	move	moving
south	south	south

;	;	;

;	;	;

;	;	;
collisiong	collisiong	collisiong
rules	rule	rule
:	:	:

;	;	;

;	;	;
1	1	1
.	.	.

gas	gas	gas
rules	rule	rule

;	;	;

;	;	;
if	if	if
(	(	(
e	e	e
&	&	&
w	w	w
)	)	)
and	and	and
!	!	!
(	(	(
n	n	n
&	&	&
s	s	s
)	)	)
then	then	then
(	(	(
e	e	e
,	,	,
w	w	w
)	)	)
-	-	-
>	>	>
(	(	(
n	n	n
,	,	,
s	s	s
)	)	)

;	;	;
if	if	if
(	(	(
n	n	n
&	&	&
s	s	s
)	)	)
and	and	and
!	!	!
(	(	(
e	e	e
&	&	&
w	w	w
)	)	)
then	then	then
(	(	(
n	n	n
,	,	,
s	s	s
)	)	)
-	-	-
>	>	>
(	(	(
e	e	e
,	,	,
w	w	w
)	)	)

;	;	;

;	;	;
for	for	for
nibbles	nibbl	nibble
:	:	:

;	;	;

;	;	;
1100	1100	1100
-	-	-
>	>	>
0011	0011	0011

;	;	;
0011	0011	0011
-	-	-
>	>	>
0011	0011	0011

;	;	;

;	;	;
and	and	and
for	for	for
bytes	byte	byte
:	:	:

;	;	;

;	;	;
11000000	11000000	11000000
-	-	-
>	>	>
00110000	00110000	00110000

;	;	;
00110000	00110000	00110000
-	-	-
>	>	>
11000000	11000000	11000000

;	;	;
00001100	00001100	00001100
-	-	-
>	>	>
00000011	00000011	00000011

;	;	;
00000011	00000011	00000011
-	-	-
>	>	>
00001100	00001100	00001100

;	;	;
00110011	00110011	00110011
-	-	-
>	>	>
11001100	11001100	11001100

;	;	;
00111100	00111100	00111100
-	-	-
>	>	>
11000011	11000011	11000011

;	;	;
11000011	11000011	11000011
-	-	-
>	>	>
00111100	00111100	00111100

;	;	;
11001100	11001100	11001100
-	-	-
>	>	>
00110011	00110011	00110011

;	;	;

;	;	;

;	;	;
2	2	2
.	.	.

reflection	reflect	reflection
rules	rule	rule

;	;	;

;	;	;
just	just	just
swap	swap	swap
bits	bit	bit
along	along	along
directions	direct	direction

;	;	;

;	;	;
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-

;	;	;

;	;	;
this	this	this
look	look	look
-	-	-
up	up	up
table	tabl	table
implements	implement	implement
two	two	two
particle	particl	particle
collisions	collis	collision

;	;	;
for	for	for
the	the	the
hpp	hpp	hpp
lattice	lattic	lattice
gas	gas	gas

;	;	;
hpprule	hpprule	hpprule
:	:	:
db	db	db
00000000b	00000000b	00000000b
;	;	;
00000000	00000000	00000000
db	db	db
00000001b	00000001b	00000001b
;	;	;
00000001	00000001	00000001
db	db	db
00000010b	00000010b	00000010b
;	;	;
00000010	00000010	00000010
db	db	db
00001100b	00001100b	00001100b
;	;	;
00000011	00000011	00000011
db	db	db
00000100b	00000100b	00000100b
;	;	;
00000100	00000100	00000100
db	db	db
00000101b	00000101b	00000101b
;	;	;
00000101	00000101	00000101
db	db	db
00000110b	00000110b	00000110b
;	;	;
00000110	00000110	00000110
db	db	db
00000111b	00000111b	00000111b
;	;	;
00000111	00000111	00000111
db	db	db
00001000b	00001000b	00001000b
;	;	;
00001000	00001000	00001000
db	db	db
00001001b	00001001b	00001001b
;	;	;
00001001	00001001	00001001
db	db	db
00001010b	00001010b	00001010b
;	;	;
00001010	00001010	00001010
db	db	db
00001011b	00001011b	00001011b
;	;	;
00001011	00001011	00001011
db	db	db
00000011b	00000011b	00000011b
;	;	;
00001100	00001100	00001100
db	db	db
00001101b	00001101b	00001101b
;	;	;
00001101	00001101	00001101
db	db	db
00001110b	00001110b	00001110b
;	;	;
00001110	00001110	00001110
db	db	db
00001111b	00001111b	00001111b
;	;	;
00001111	00001111	00001111
db	db	db
00010000b	00010000b	00010000b
;	;	;
00010000	00010000	00010000
db	db	db
00010001b	00010001b	00010001b
;	;	;
00010001	00010001	00010001
db	db	db
00010010b	00010010b	00010010b
;	;	;
00010010	00010010	00010010
db	db	db
00011100b	00011100b	00011100b
;	;	;
00010011	00010011	00010011
db	db	db
00010100b	00010100b	00010100b
;	;	;
00010100	00010100	00010100
db	db	db
00010101b	00010101b	00010101b
;	;	;
00010101	00010101	00010101
db	db	db
00010110b	00010110b	00010110b
;	;	;
00010110	00010110	00010110
db	db	db
00010111b	00010111b	00010111b
;	;	;
00010111	00010111	00010111
db	db	db
00011000b	00011000b	00011000b
;	;	;
00011000	00011000	00011000
db	db	db
00011001b	00011001b	00011001b
;	;	;
00011001	00011001	00011001
db	db	db
00011010b	00011010b	00011010b
;	;	;
00011010	00011010	00011010
db	db	db
00011011b	00011011b	00011011b
;	;	;
00011011	00011011	00011011
db	db	db
00010011b	00010011b	00010011b
;	;	;
00011100	00011100	00011100
db	db	db
00011101b	00011101b	00011101b
;	;	;
00011101	00011101	00011101
db	db	db
00011110b	00011110b	00011110b
;	;	;
00011110	00011110	00011110
db	db	db
00011111b	00011111b	00011111b
;	;	;
00011111	00011111	00011111
db	db	db
00100000b	00100000b	00100000b
;	;	;
00100000	00100000	00100000
db	db	db
00100001b	00100001b	00100001b
;	;	;
00100001	00100001	00100001
db	db	db
00100010b	00100010b	00100010b
;	;	;
00100010	00100010	00100010
db	db	db
00101100b	00101100b	00101100b
;	;	;
00100011	00100011	00100011
db	db	db
00100100b	00100100b	00100100b
;	;	;
00100100	00100100	00100100
db	db	db
00100101b	00100101b	00100101b
;	;	;
00100101	00100101	00100101
db	db	db
00100110b	00100110b	00100110b
;	;	;
00100110	00100110	00100110
db	db	db
00100111b	00100111b	00100111b
;	;	;
00100111	00100111	00100111
db	db	db
00101000b	00101000b	00101000b
;	;	;
00101000	00101000	00101000
db	db	db
00101001b	00101001b	00101001b
;	;	;
00101001	00101001	00101001
db	db	db
00101010b	00101010b	00101010b
;	;	;
00101010	00101010	00101010
db	db	db
00101011b	00101011b	00101011b
;	;	;
00101011	00101011	00101011
db	db	db
00100011b	00100011b	00100011b
;	;	;
00101100	00101100	00101100
db	db	db
00101101b	00101101b	00101101b
;	;	;
00101101	00101101	00101101
db	db	db
00101110b	00101110b	00101110b
;	;	;
00101110	00101110	00101110
db	db	db
00101111b	00101111b	00101111b
;	;	;
00101111	00101111	00101111
db	db	db
11000000b	11000000b	11000000b
;	;	;
00110000	00110000	00110000
db	db	db
11000001b	11000001b	11000001b
;	;	;
00110001	00110001	00110001
db	db	db
11000010b	11000010b	11000010b
;	;	;
00110010	00110010	00110010
db	db	db
11001100b	11001100b	11001100b
;	;	;
00110011	00110011	00110011
db	db	db
11000100b	11000100b	11000100b
;	;	;
00110100	00110100	00110100
db	db	db
11000101b	11000101b	11000101b
;	;	;
00110101	00110101	00110101
db	db	db
11000110b	11000110b	11000110b
;	;	;
00110110	00110110	00110110
db	db	db
11000111b	11000111b	11000111b
;	;	;
00110111	00110111	00110111
db	db	db
11001000b	11001000b	11001000b
;	;	;
00111000	00111000	00111000
db	db	db
11001001b	11001001b	11001001b
;	;	;
00111001	00111001	00111001
db	db	db
11001010b	11001010b	11001010b
;	;	;
00111010	00111010	00111010
db	db	db
11001011b	11001011b	11001011b
;	;	;
00111011	00111011	00111011
db	db	db
11000011b	11000011b	11000011b
;	;	;
00111100	00111100	00111100
db	db	db
11001101b	11001101b	11001101b
;	;	;
00111101	00111101	00111101
db	db	db
11001110b	11001110b	11001110b
;	;	;
00111110	00111110	00111110
db	db	db
11001111b	11001111b	11001111b
;	;	;
00111111	00111111	00111111
db	db	db
01000000b	01000000b	01000000b
;	;	;
01000000	01000000	01000000
db	db	db
01000001b	01000001b	01000001b
;	;	;
01000001	01000001	01000001
db	db	db
01000010b	01000010b	01000010b
;	;	;
01000010	01000010	01000010
db	db	db
01001100b	01001100b	01001100b
;	;	;
01000011	01000011	01000011
db	db	db
01000100b	01000100b	01000100b
;	;	;
01000100	01000100	01000100
db	db	db
01000101b	01000101b	01000101b
;	;	;
01000101	01000101	01000101
db	db	db
01000110b	01000110b	01000110b
;	;	;
01000110	01000110	01000110
db	db	db
01000111b	01000111b	01000111b
;	;	;
01000111	01000111	01000111
db	db	db
01001000b	01001000b	01001000b
;	;	;
01001000	01001000	01001000
db	db	db
01001001b	01001001b	01001001b
;	;	;
01001001	01001001	01001001
db	db	db
01001010b	01001010b	01001010b
;	;	;
01001010	01001010	01001010
db	db	db
01001011b	01001011b	01001011b
;	;	;
01001011	01001011	01001011
db	db	db
01000011b	01000011b	01000011b
;	;	;
01001100	01001100	01001100
db	db	db
01001101b	01001101b	01001101b
;	;	;
01001101	01001101	01001101
db	db	db
01001110b	01001110b	01001110b
;	;	;
01001110	01001110	01001110
db	db	db
01001111b	01001111b	01001111b
;	;	;
01001111	01001111	01001111
db	db	db
01010000b	01010000b	01010000b
;	;	;
01010000	01010000	01010000
db	db	db
01010001b	01010001b	01010001b
;	;	;
01010001	01010001	01010001
db	db	db
01010010b	01010010b	01010010b
;	;	;
01010010	01010010	01010010
db	db	db
01011100b	01011100b	01011100b
;	;	;
01010011	01010011	01010011
db	db	db
01010100b	01010100b	01010100b
;	;	;
01010100	01010100	01010100
db	db	db
01010101b	01010101b	01010101b
;	;	;
01010101	01010101	01010101
db	db	db
01010110b	01010110b	01010110b
;	;	;
01010110	01010110	01010110
db	db	db
01010111b	01010111b	01010111b
;	;	;
01010111	01010111	01010111
db	db	db
01011000b	01011000b	01011000b
;	;	;
01011000	01011000	01011000
db	db	db
01011001b	01011001b	01011001b
;	;	;
01011001	01011001	01011001
db	db	db
01011010b	01011010b	01011010b
;	;	;
01011010	01011010	01011010
db	db	db
01011011b	01011011b	01011011b
;	;	;
01011011	01011011	01011011
db	db	db
01010011b	01010011b	01010011b
;	;	;
01011100	01011100	01011100
db	db	db
01011101b	01011101b	01011101b
;	;	;
01011101	01011101	01011101
db	db	db
01011110b	01011110b	01011110b
;	;	;
01011110	01011110	01011110
db	db	db
01011111b	01011111b	01011111b
;	;	;
01011111	01011111	01011111
db	db	db
01100000b	01100000b	01100000b
;	;	;
01100000	01100000	01100000
db	db	db
01100001b	01100001b	01100001b
;	;	;
01100001	01100001	01100001
db	db	db
01100010b	01100010b	01100010b
;	;	;
01100010	01100010	01100010
db	db	db
01101100b	01101100b	01101100b
;	;	;
01100011	01100011	01100011
db	db	db
01100100b	01100100b	01100100b
;	;	;
01100100	01100100	01100100
db	db	db
01100101b	01100101b	01100101b
;	;	;
01100101	01100101	01100101
db	db	db
01100110b	01100110b	01100110b
;	;	;
01100110	01100110	01100110
db	db	db
01100111b	01100111b	01100111b
;	;	;
01100111	01100111	01100111
db	db	db
01101000b	01101000b	01101000b
;	;	;
01101000	01101000	01101000
db	db	db
01101001b	01101001b	01101001b
;	;	;
01101001	01101001	01101001
db	db	db
01101010b	01101010b	01101010b
;	;	;
01101010	01101010	01101010
db	db	db
01101011b	01101011b	01101011b
;	;	;
01101011	01101011	01101011
db	db	db
01100011b	01100011b	01100011b
;	;	;
01101100	01101100	01101100
db	db	db
01101101b	01101101b	01101101b
;	;	;
01101101	01101101	01101101
db	db	db
01101110b	01101110b	01101110b
;	;	;
01101110	01101110	01101110
db	db	db
01101111b	01101111b	01101111b
;	;	;
01101111	01101111	01101111
db	db	db
01110000b	01110000b	01110000b
;	;	;
01110000	01110000	01110000
db	db	db
01110001b	01110001b	01110001b
;	;	;
01110001	01110001	01110001
db	db	db
01110010b	01110010b	01110010b
;	;	;
01110010	01110010	01110010
db	db	db
01111100b	01111100b	01111100b
;	;	;
01110011	01110011	01110011
db	db	db
01110100b	01110100b	01110100b
;	;	;
01110100	01110100	01110100
db	db	db
01110101b	01110101b	01110101b
;	;	;
01110101	01110101	01110101
db	db	db
01110110b	01110110b	01110110b
;	;	;
01110110	01110110	01110110
db	db	db
01110111b	01110111b	01110111b
;	;	;
01110111	01110111	01110111
db	db	db
01111000b	01111000b	01111000b
;	;	;
01111000	01111000	01111000
db	db	db
01111001b	01111001b	01111001b
;	;	;
01111001	01111001	01111001
db	db	db
01111010b	01111010b	01111010b
;	;	;
01111010	01111010	01111010
db	db	db
01111011b	01111011b	01111011b
;	;	;
01111011	01111011	01111011
db	db	db
01110011b	01110011b	01110011b
;	;	;
01111100	01111100	01111100
db	db	db
01111101b	01111101b	01111101b
;	;	;
01111101	01111101	01111101
db	db	db
01111110b	01111110b	01111110b
;	;	;
01111110	01111110	01111110
db	db	db
01111111b	01111111b	01111111b
;	;	;
01111111	01111111	01111111
db	db	db
10000000b	10000000b	10000000b
;	;	;
10000000	10000000	10000000
db	db	db
10000001b	10000001b	10000001b
;	;	;
10000001	10000001	10000001
db	db	db
10000010b	10000010b	10000010b
;	;	;
10000010	10000010	10000010
db	db	db
10001100b	10001100b	10001100b
;	;	;
10000011	10000011	10000011
db	db	db
10000100b	10000100b	10000100b
;	;	;
10000100	10000100	10000100
db	db	db
10000101b	10000101b	10000101b
;	;	;
10000101	10000101	10000101
db	db	db
10000110b	10000110b	10000110b
;	;	;
10000110	10000110	10000110
db	db	db
10000111b	10000111b	10000111b
;	;	;
10000111	10000111	10000111
db	db	db
10001000b	10001000b	10001000b
;	;	;
10001000	10001000	10001000
db	db	db
10001001b	10001001b	10001001b
;	;	;
10001001	10001001	10001001
db	db	db
10001010b	10001010b	10001010b
;	;	;
10001010	10001010	10001010
db	db	db
10001011b	10001011b	10001011b
;	;	;
10001011	10001011	10001011
db	db	db
10000011b	10000011b	10000011b
;	;	;
10001100	10001100	10001100
db	db	db
10001101b	10001101b	10001101b
;	;	;
10001101	10001101	10001101
db	db	db
10001110b	10001110b	10001110b
;	;	;
10001110	10001110	10001110
db	db	db
10001111b	10001111b	10001111b
;	;	;
10001111	10001111	10001111
db	db	db
10010000b	10010000b	10010000b
;	;	;
10010000	10010000	10010000
db	db	db
10010001b	10010001b	10010001b
;	;	;
10010001	10010001	10010001
db	db	db
10010010b	10010010b	10010010b
;	;	;
10010010	10010010	10010010
db	db	db
10011100b	10011100b	10011100b
;	;	;
10010011	10010011	10010011
db	db	db
10010100b	10010100b	10010100b
;	;	;
10010100	10010100	10010100
db	db	db
10010101b	10010101b	10010101b
;	;	;
10010101	10010101	10010101
db	db	db
10010110b	10010110b	10010110b
;	;	;
10010110	10010110	10010110
db	db	db
10010111b	10010111b	10010111b
;	;	;
10010111	10010111	10010111
db	db	db
10011000b	10011000b	10011000b
;	;	;
10011000	10011000	10011000
db	db	db
10011001b	10011001b	10011001b
;	;	;
10011001	10011001	10011001
db	db	db
10011010b	10011010b	10011010b
;	;	;
10011010	10011010	10011010
db	db	db
10011011b	10011011b	10011011b
;	;	;
10011011	10011011	10011011
db	db	db
10010011b	10010011b	10010011b
;	;	;
10011100	10011100	10011100
db	db	db
10011101b	10011101b	10011101b
;	;	;
10011101	10011101	10011101
db	db	db
10011110b	10011110b	10011110b
;	;	;
10011110	10011110	10011110
db	db	db
10011111b	10011111b	10011111b
;	;	;
10011111	10011111	10011111
db	db	db
10100000b	10100000b	10100000b
;	;	;
10100000	10100000	10100000
db	db	db
10100001b	10100001b	10100001b
;	;	;
10100001	10100001	10100001
db	db	db
10100010b	10100010b	10100010b
;	;	;
10100010	10100010	10100010
db	db	db
10101100b	10101100b	10101100b
;	;	;
10100011	10100011	10100011
db	db	db
10100100b	10100100b	10100100b
;	;	;
10100100	10100100	10100100
db	db	db
10100101b	10100101b	10100101b
;	;	;
10100101	10100101	10100101
db	db	db
10100110b	10100110b	10100110b
;	;	;
10100110	10100110	10100110
db	db	db
10100111b	10100111b	10100111b
;	;	;
10100111	10100111	10100111
db	db	db
10101000b	10101000b	10101000b
;	;	;
10101000	10101000	10101000
db	db	db
10101001b	10101001b	10101001b
;	;	;
10101001	10101001	10101001
db	db	db
10101010b	10101010b	10101010b
;	;	;
10101010	10101010	10101010
db	db	db
10101011b	10101011b	10101011b
;	;	;
10101011	10101011	10101011
db	db	db
10100011b	10100011b	10100011b
;	;	;
10101100	10101100	10101100
db	db	db
10101101b	10101101b	10101101b
;	;	;
10101101	10101101	10101101
db	db	db
10101110b	10101110b	10101110b
;	;	;
10101110	10101110	10101110
db	db	db
10101111b	10101111b	10101111b
;	;	;
10101111	10101111	10101111
db	db	db
10110000b	10110000b	10110000b
;	;	;
10110000	10110000	10110000
db	db	db
10110001b	10110001b	10110001b
;	;	;
10110001	10110001	10110001
db	db	db
10110010b	10110010b	10110010b
;	;	;
10110010	10110010	10110010
db	db	db
10111100b	10111100b	10111100b
;	;	;
10110011	10110011	10110011
db	db	db
10110100b	10110100b	10110100b
;	;	;
10110100	10110100	10110100
db	db	db
10110101b	10110101b	10110101b
;	;	;
10110101	10110101	10110101
db	db	db
10110110b	10110110b	10110110b
;	;	;
10110110	10110110	10110110
db	db	db
10110111b	10110111b	10110111b
;	;	;
10110111	10110111	10110111
db	db	db
10111000b	10111000b	10111000b
;	;	;
10111000	10111000	10111000
db	db	db
10111001b	10111001b	10111001b
;	;	;
10111001	10111001	10111001
db	db	db
10111010b	10111010b	10111010b
;	;	;
10111010	10111010	10111010
db	db	db
10111011b	10111011b	10111011b
;	;	;
10111011	10111011	10111011
db	db	db
10110011b	10110011b	10110011b
;	;	;
10111100	10111100	10111100
db	db	db
10111101b	10111101b	10111101b
;	;	;
10111101	10111101	10111101
db	db	db
10111110b	10111110b	10111110b
;	;	;
10111110	10111110	10111110
db	db	db
10111111b	10111111b	10111111b
;	;	;
10111111	10111111	10111111
db	db	db
00110000b	00110000b	00110000b
;	;	;
11000000	11000000	11000000
db	db	db
00110001b	00110001b	00110001b
;	;	;
11000001	11000001	11000001
db	db	db
00110010b	00110010b	00110010b
;	;	;
11000010	11000010	11000010
db	db	db
00111100b	00111100b	00111100b
;	;	;
11000011	11000011	11000011
db	db	db
00110100b	00110100b	00110100b
;	;	;
11000100	11000100	11000100
db	db	db
00110101b	00110101b	00110101b
;	;	;
11000101	11000101	11000101
db	db	db
00110110b	00110110b	00110110b
;	;	;
11000110	11000110	11000110
db	db	db
00110111b	00110111b	00110111b
;	;	;
11000111	11000111	11000111
db	db	db
00111000b	00111000b	00111000b
;	;	;
11001000	11001000	11001000
db	db	db
00111001b	00111001b	00111001b
;	;	;
11001001	11001001	11001001
db	db	db
00111010b	00111010b	00111010b
;	;	;
11001010	11001010	11001010
db	db	db
00111011b	00111011b	00111011b
;	;	;
11001011	11001011	11001011
db	db	db
00110011b	00110011b	00110011b
;	;	;
11001100	11001100	11001100
db	db	db
00111101b	00111101b	00111101b
;	;	;
11001101	11001101	11001101
db	db	db
00111110b	00111110b	00111110b
;	;	;
11001110	11001110	11001110
db	db	db
00111111b	00111111b	00111111b
;	;	;
11001111	11001111	11001111
db	db	db
11010000b	11010000b	11010000b
;	;	;
11010000	11010000	11010000
db	db	db
11010001b	11010001b	11010001b
;	;	;
11010001	11010001	11010001
db	db	db
11010010b	11010010b	11010010b
;	;	;
11010010	11010010	11010010
db	db	db
11011100b	11011100b	11011100b
;	;	;
11010011	11010011	11010011
db	db	db
11010100b	11010100b	11010100b
;	;	;
11010100	11010100	11010100
db	db	db
11010101b	11010101b	11010101b
;	;	;
11010101	11010101	11010101
db	db	db
11010110b	11010110b	11010110b
;	;	;
11010110	11010110	11010110
db	db	db
11010111b	11010111b	11010111b
;	;	;
11010111	11010111	11010111
db	db	db
11011000b	11011000b	11011000b
;	;	;
11011000	11011000	11011000
db	db	db
11011001b	11011001b	11011001b
;	;	;
11011001	11011001	11011001
db	db	db
11011010b	11011010b	11011010b
;	;	;
11011010	11011010	11011010
db	db	db
11011011b	11011011b	11011011b
;	;	;
11011011	11011011	11011011
db	db	db
11010011b	11010011b	11010011b
;	;	;
11011100	11011100	11011100
db	db	db
11011101b	11011101b	11011101b
;	;	;
11011101	11011101	11011101
db	db	db
11011110b	11011110b	11011110b
;	;	;
11011110	11011110	11011110
db	db	db
11011111b	11011111b	11011111b
;	;	;
11011111	11011111	11011111
db	db	db
11100000b	11100000b	11100000b
;	;	;
11100000	11100000	11100000
db	db	db
11100001b	11100001b	11100001b
;	;	;
11100001	11100001	11100001
db	db	db
11100010b	11100010b	11100010b
;	;	;
11100010	11100010	11100010
db	db	db
11101100b	11101100b	11101100b
;	;	;
11100011	11100011	11100011
db	db	db
11100100b	11100100b	11100100b
;	;	;
11100100	11100100	11100100
db	db	db
11100101b	11100101b	11100101b
;	;	;
11100101	11100101	11100101
db	db	db
11100110b	11100110b	11100110b
;	;	;
11100110	11100110	11100110
db	db	db
11100111b	11100111b	11100111b
;	;	;
11100111	11100111	11100111
db	db	db
11101000b	11101000b	11101000b
;	;	;
11101000	11101000	11101000
db	db	db
11101001b	11101001b	11101001b
;	;	;
11101001	11101001	11101001
db	db	db
11101010b	11101010b	11101010b
;	;	;
11101010	11101010	11101010
db	db	db
11101011b	11101011b	11101011b
;	;	;
11101011	11101011	11101011
db	db	db
11100011b	11100011b	11100011b
;	;	;
11101100	11101100	11101100
db	db	db
11101101b	11101101b	11101101b
;	;	;
11101101	11101101	11101101
db	db	db
11101110b	11101110b	11101110b
;	;	;
11101110	11101110	11101110
db	db	db
11101111b	11101111b	11101111b
;	;	;
11101111	11101111	11101111
db	db	db
11110000b	11110000b	11110000b
;	;	;
11110000	11110000	11110000
db	db	db
11110001b	11110001b	11110001b
;	;	;
11110001	11110001	11110001
db	db	db
11110010b	11110010b	11110010b
;	;	;
11110010	11110010	11110010
db	db	db
11111100b	11111100b	11111100b
;	;	;
11110011	11110011	11110011
db	db	db
11110100b	11110100b	11110100b
;	;	;
11110100	11110100	11110100
db	db	db
11110101b	11110101b	11110101b
;	;	;
11110101	11110101	11110101
db	db	db
11110110b	11110110b	11110110b
;	;	;
11110110	11110110	11110110
db	db	db
11110111b	11110111b	11110111b
;	;	;
11110111	11110111	11110111
db	db	db
11111000b	11111000b	11111000b
;	;	;
11111000	11111000	11111000
db	db	db
11111001b	11111001b	11111001b
;	;	;
11111001	11111001	11111001
db	db	db
11111010b	11111010b	11111010b
;	;	;
11111010	11111010	11111010
db	db	db
11111011b	11111011b	11111011b
;	;	;
11111011	11111011	11111011
db	db	db
11110011b	11110011b	11110011b
;	;	;
11111100	11111100	11111100
db	db	db
11111101b	11111101b	11111101b
;	;	;
11111101	11111101	11111101
db	db	db
11111110b	11111110b	11111110b
;	;	;
11111110	11111110	11111110
db	db	db
11111111b	11111111b	11111111b
;	;	;
11111111	11111111	11111111

;	;	;

;	;	;
this	this	this
rule	rule	rule
implements	implement	implement
the	the	the
velocity	veloc	velocity
-	-	-
reversal	revers	reversal
needed	need	needed
to	to	to

;	;	;
run	run	run
the	the	the
gas	gas	gas
evolution	evolut	evolution
in	in	in
reverse	revers	reverse
.	.	.

its	it	it
called	call	called
a	a	a
wallrule	wallrul	wallrule

;	;	;
because	becaus	because
its	it	it
the	the	the
same	same	same
as	as	a
is	is	is
all	all	all
particles	particl	particle
hit	hit	hit
a	a	a
wall	wall	wall

;	;	;
head	head	head
on	on	on
.	.	.

;	;	;
wallrule	wallrul	wallrule
:	:	:
db	db	db
00000000b	00000000b	00000000b
;	;	;
00000000	00000000	00000000
db	db	db
00000010b	00000010b	00000010b
;	;	;
00000001	00000001	00000001
db	db	db
00000001b	00000001b	00000001b
;	;	;
00000010	00000010	00000010
db	db	db
00001100b	00001100b	00001100b
;	;	;
00000011	00000011	00000011
db	db	db
00001000b	00001000b	00001000b
;	;	;
00000100	00000100	00000100
db	db	db
00001010b	00001010b	00001010b
;	;	;
00000101	00000101	00000101
db	db	db
00001001b	00001001b	00001001b
;	;	;
00000110	00000110	00000110
db	db	db
00001011b	00001011b	00001011b
;	;	;
00000111	00000111	00000111
db	db	db
00000100b	00000100b	00000100b
;	;	;
00001000	00001000	00001000
db	db	db
00000110b	00000110b	00000110b
;	;	;
00001001	00001001	00001001
db	db	db
00000101b	00000101b	00000101b
;	;	;
00001010	00001010	00001010
db	db	db
00000111b	00000111b	00000111b
;	;	;
00001011	00001011	00001011
db	db	db
00000011b	00000011b	00000011b
;	;	;
00001100	00001100	00001100
db	db	db
00001110b	00001110b	00001110b
;	;	;
00001101	00001101	00001101
db	db	db
00001101b	00001101b	00001101b
;	;	;
00001110	00001110	00001110
db	db	db
00001111b	00001111b	00001111b
;	;	;
00001111	00001111	00001111
db	db	db
00100000b	00100000b	00100000b
;	;	;
00010000	00010000	00010000
db	db	db
00100010b	00100010b	00100010b
;	;	;
00010001	00010001	00010001
db	db	db
00100001b	00100001b	00100001b
;	;	;
00010010	00010010	00010010
db	db	db
00101100b	00101100b	00101100b
;	;	;
00010011	00010011	00010011
db	db	db
00101000b	00101000b	00101000b
;	;	;
00010100	00010100	00010100
db	db	db
00101010b	00101010b	00101010b
;	;	;
00010101	00010101	00010101
db	db	db
00101001b	00101001b	00101001b
;	;	;
00010110	00010110	00010110
db	db	db
00101011b	00101011b	00101011b
;	;	;
00010111	00010111	00010111
db	db	db
00100100b	00100100b	00100100b
;	;	;
00011000	00011000	00011000
db	db	db
00100110b	00100110b	00100110b
;	;	;
00011001	00011001	00011001
db	db	db
00100101b	00100101b	00100101b
;	;	;
00011010	00011010	00011010
db	db	db
00100111b	00100111b	00100111b
;	;	;
00011011	00011011	00011011
db	db	db
00100011b	00100011b	00100011b
;	;	;
00011100	00011100	00011100
db	db	db
00101110b	00101110b	00101110b
;	;	;
00011101	00011101	00011101
db	db	db
00101101b	00101101b	00101101b
;	;	;
00011110	00011110	00011110
db	db	db
00101111b	00101111b	00101111b
;	;	;
00011111	00011111	00011111
db	db	db
00010000b	00010000b	00010000b
;	;	;
00100000	00100000	00100000
db	db	db
00010010b	00010010b	00010010b
;	;	;
00100001	00100001	00100001
db	db	db
00010001b	00010001b	00010001b
;	;	;
00100010	00100010	00100010
db	db	db
00011100b	00011100b	00011100b
;	;	;
00100011	00100011	00100011
db	db	db
00011000b	00011000b	00011000b
;	;	;
00100100	00100100	00100100
db	db	db
00011010b	00011010b	00011010b
;	;	;
00100101	00100101	00100101
db	db	db
00011001b	00011001b	00011001b
;	;	;
00100110	00100110	00100110
db	db	db
00011011b	00011011b	00011011b
;	;	;
00100111	00100111	00100111
db	db	db
00010100b	00010100b	00010100b
;	;	;
00101000	00101000	00101000
db	db	db
00010110b	00010110b	00010110b
;	;	;
00101001	00101001	00101001
db	db	db
00010101b	00010101b	00010101b
;	;	;
00101010	00101010	00101010
db	db	db
00010111b	00010111b	00010111b
;	;	;
00101011	00101011	00101011
db	db	db
00010011b	00010011b	00010011b
;	;	;
00101100	00101100	00101100
db	db	db
00011110b	00011110b	00011110b
;	;	;
00101101	00101101	00101101
db	db	db
00011101b	00011101b	00011101b
;	;	;
00101110	00101110	00101110
db	db	db
00011111b	00011111b	00011111b
;	;	;
00101111	00101111	00101111
db	db	db
11000000b	11000000b	11000000b
;	;	;
00110000	00110000	00110000
db	db	db
11000010b	11000010b	11000010b
;	;	;
00110001	00110001	00110001
db	db	db
11000001b	11000001b	11000001b
;	;	;
00110010	00110010	00110010
db	db	db
11001100b	11001100b	11001100b
;	;	;
00110011	00110011	00110011
db	db	db
11001000b	11001000b	11001000b
;	;	;
00110100	00110100	00110100
db	db	db
11001010b	11001010b	11001010b
;	;	;
00110101	00110101	00110101
db	db	db
11001001b	11001001b	11001001b
;	;	;
00110110	00110110	00110110
db	db	db
11001011b	11001011b	11001011b
;	;	;
00110111	00110111	00110111
db	db	db
11000100b	11000100b	11000100b
;	;	;
00111000	00111000	00111000
db	db	db
11000110b	11000110b	11000110b
;	;	;
00111001	00111001	00111001
db	db	db
11000101b	11000101b	11000101b
;	;	;
00111010	00111010	00111010
db	db	db
11000111b	11000111b	11000111b
;	;	;
00111011	00111011	00111011
db	db	db
11000011b	11000011b	11000011b
;	;	;
00111100	00111100	00111100
db	db	db
11001110b	11001110b	11001110b
;	;	;
00111101	00111101	00111101
db	db	db
11001101b	11001101b	11001101b
;	;	;
00111110	00111110	00111110
db	db	db
11001111b	11001111b	11001111b
;	;	;
00111111	00111111	00111111
db	db	db
10000000b	10000000b	10000000b
;	;	;
01000000	01000000	01000000
db	db	db
10000010b	10000010b	10000010b
;	;	;
01000001	01000001	01000001
db	db	db
10000001b	10000001b	10000001b
;	;	;
01000010	01000010	01000010
db	db	db
10001100b	10001100b	10001100b
;	;	;
01000011	01000011	01000011
db	db	db
10001000b	10001000b	10001000b
;	;	;
01000100	01000100	01000100
db	db	db
10001010b	10001010b	10001010b
;	;	;
01000101	01000101	01000101
db	db	db
10001001b	10001001b	10001001b
;	;	;
01000110	01000110	01000110
db	db	db
10001011b	10001011b	10001011b
;	;	;
01000111	01000111	01000111
db	db	db
10000100b	10000100b	10000100b
;	;	;
01001000	01001000	01001000
db	db	db
10000110b	10000110b	10000110b
;	;	;
01001001	01001001	01001001
db	db	db
10000101b	10000101b	10000101b
;	;	;
01001010	01001010	01001010
db	db	db
10000111b	10000111b	10000111b
;	;	;
01001011	01001011	01001011
db	db	db
10000011b	10000011b	10000011b
;	;	;
01001100	01001100	01001100
db	db	db
10001110b	10001110b	10001110b
;	;	;
01001101	01001101	01001101
db	db	db
10001101b	10001101b	10001101b
;	;	;
01001110	01001110	01001110
db	db	db
10001111b	10001111b	10001111b
;	;	;
01001111	01001111	01001111
db	db	db
10100000b	10100000b	10100000b
;	;	;
01010000	01010000	01010000
db	db	db
10100010b	10100010b	10100010b
;	;	;
01010001	01010001	01010001
db	db	db
10100001b	10100001b	10100001b
;	;	;
01010010	01010010	01010010
db	db	db
10101100b	10101100b	10101100b
;	;	;
01010011	01010011	01010011
db	db	db
10101000b	10101000b	10101000b
;	;	;
01010100	01010100	01010100
db	db	db
10101010b	10101010b	10101010b
;	;	;
01010101	01010101	01010101
db	db	db
10101001b	10101001b	10101001b
;	;	;
01010110	01010110	01010110
db	db	db
10101011b	10101011b	10101011b
;	;	;
01010111	01010111	01010111
db	db	db
10100100b	10100100b	10100100b
;	;	;
01011000	01011000	01011000
db	db	db
10100110b	10100110b	10100110b
;	;	;
01011001	01011001	01011001
db	db	db
10100101b	10100101b	10100101b
;	;	;
01011010	01011010	01011010
db	db	db
10100111b	10100111b	10100111b
;	;	;
01011011	01011011	01011011
db	db	db
10100011b	10100011b	10100011b
;	;	;
01011100	01011100	01011100
db	db	db
10101110b	10101110b	10101110b
;	;	;
01011101	01011101	01011101
db	db	db
10101101b	10101101b	10101101b
;	;	;
01011110	01011110	01011110
db	db	db
10101111b	10101111b	10101111b
;	;	;
01011111	01011111	01011111
db	db	db
10010000b	10010000b	10010000b
;	;	;
01100000	01100000	01100000
db	db	db
10010010b	10010010b	10010010b
;	;	;
01100001	01100001	01100001
db	db	db
10010001b	10010001b	10010001b
;	;	;
01100010	01100010	01100010
db	db	db
10011100b	10011100b	10011100b
;	;	;
01100011	01100011	01100011
db	db	db
10011000b	10011000b	10011000b
;	;	;
01100100	01100100	01100100
db	db	db
10011010b	10011010b	10011010b
;	;	;
01100101	01100101	01100101
db	db	db
10011001b	10011001b	10011001b
;	;	;
01100110	01100110	01100110
db	db	db
10011011b	10011011b	10011011b
;	;	;
01100111	01100111	01100111
db	db	db
10010100b	10010100b	10010100b
;	;	;
01101000	01101000	01101000
db	db	db
10010110b	10010110b	10010110b
;	;	;
01101001	01101001	01101001
db	db	db
10010101b	10010101b	10010101b
;	;	;
01101010	01101010	01101010
db	db	db
10010111b	10010111b	10010111b
;	;	;
01101011	01101011	01101011
db	db	db
10010011b	10010011b	10010011b
;	;	;
01101100	01101100	01101100
db	db	db
10011110b	10011110b	10011110b
;	;	;
01101101	01101101	01101101
db	db	db
10011101b	10011101b	10011101b
;	;	;
01101110	01101110	01101110
db	db	db
10011111b	10011111b	10011111b
;	;	;
01101111	01101111	01101111
db	db	db
10110000b	10110000b	10110000b
;	;	;
01110000	01110000	01110000
db	db	db
10110010b	10110010b	10110010b
;	;	;
01110001	01110001	01110001
db	db	db
10110001b	10110001b	10110001b
;	;	;
01110010	01110010	01110010
db	db	db
10111100b	10111100b	10111100b
;	;	;
01110011	01110011	01110011
db	db	db
10111000b	10111000b	10111000b
;	;	;
01110100	01110100	01110100
db	db	db
10111010b	10111010b	10111010b
;	;	;
01110101	01110101	01110101
db	db	db
10111001b	10111001b	10111001b
;	;	;
01110110	01110110	01110110
db	db	db
10111011b	10111011b	10111011b
;	;	;
01110111	01110111	01110111
db	db	db
10110100b	10110100b	10110100b
;	;	;
01111000	01111000	01111000
db	db	db
10110110b	10110110b	10110110b
;	;	;
01111001	01111001	01111001
db	db	db
10110101b	10110101b	10110101b
;	;	;
01111010	01111010	01111010
db	db	db
10110111b	10110111b	10110111b
;	;	;
01111011	01111011	01111011
db	db	db
10110011b	10110011b	10110011b
;	;	;
01111100	01111100	01111100
db	db	db
10111110b	10111110b	10111110b
;	;	;
01111101	01111101	01111101
db	db	db
10111101b	10111101b	10111101b
;	;	;
01111110	01111110	01111110
db	db	db
10111111b	10111111b	10111111b
;	;	;
01111111	01111111	01111111
db	db	db
01000000b	01000000b	01000000b
;	;	;
10000000	10000000	10000000
db	db	db
01000010b	01000010b	01000010b
;	;	;
10000001	10000001	10000001
db	db	db
01000001b	01000001b	01000001b
;	;	;
10000010	10000010	10000010
db	db	db
01001100b	01001100b	01001100b
;	;	;
10000011	10000011	10000011
db	db	db
01001000b	01001000b	01001000b
;	;	;
10000100	10000100	10000100
db	db	db
01001010b	01001010b	01001010b
;	;	;
10000101	10000101	10000101
db	db	db
01001001b	01001001b	01001001b
;	;	;
10000110	10000110	10000110
db	db	db
01001011b	01001011b	01001011b
;	;	;
10000111	10000111	10000111
db	db	db
01000100b	01000100b	01000100b
;	;	;
10001000	10001000	10001000
db	db	db
01000110b	01000110b	01000110b
;	;	;
10001001	10001001	10001001
db	db	db
01000101b	01000101b	01000101b
;	;	;
10001010	10001010	10001010
db	db	db
01000111b	01000111b	01000111b
;	;	;
10001011	10001011	10001011
db	db	db
01000011b	01000011b	01000011b
;	;	;
10001100	10001100	10001100
db	db	db
01001110b	01001110b	01001110b
;	;	;
10001101	10001101	10001101
db	db	db
01001101b	01001101b	01001101b
;	;	;
10001110	10001110	10001110
db	db	db
01001111b	01001111b	01001111b
;	;	;
10001111	10001111	10001111
db	db	db
01100000b	01100000b	01100000b
;	;	;
10010000	10010000	10010000
db	db	db
01100010b	01100010b	01100010b
;	;	;
10010001	10010001	10010001
db	db	db
01100001b	01100001b	01100001b
;	;	;
10010010	10010010	10010010
db	db	db
01101100b	01101100b	01101100b
;	;	;
10010011	10010011	10010011
db	db	db
01101000b	01101000b	01101000b
;	;	;
10010100	10010100	10010100
db	db	db
01101010b	01101010b	01101010b
;	;	;
10010101	10010101	10010101
db	db	db
01101001b	01101001b	01101001b
;	;	;
10010110	10010110	10010110
db	db	db
01101011b	01101011b	01101011b
;	;	;
10010111	10010111	10010111
db	db	db
01100100b	01100100b	01100100b
;	;	;
10011000	10011000	10011000
db	db	db
01100110b	01100110b	01100110b
;	;	;
10011001	10011001	10011001
db	db	db
01100101b	01100101b	01100101b
;	;	;
10011010	10011010	10011010
db	db	db
01100111b	01100111b	01100111b
;	;	;
10011011	10011011	10011011
db	db	db
01100011b	01100011b	01100011b
;	;	;
10011100	10011100	10011100
db	db	db
01101110b	01101110b	01101110b
;	;	;
10011101	10011101	10011101
db	db	db
01101101b	01101101b	01101101b
;	;	;
10011110	10011110	10011110
db	db	db
01101111b	01101111b	01101111b
;	;	;
10011111	10011111	10011111
db	db	db
01010000b	01010000b	01010000b
;	;	;
10100000	10100000	10100000
db	db	db
01010010b	01010010b	01010010b
;	;	;
10100001	10100001	10100001
db	db	db
01010001b	01010001b	01010001b
;	;	;
10100010	10100010	10100010
db	db	db
01011100b	01011100b	01011100b
;	;	;
10100011	10100011	10100011
db	db	db
01011000b	01011000b	01011000b
;	;	;
10100100	10100100	10100100
db	db	db
01011010b	01011010b	01011010b
;	;	;
10100101	10100101	10100101
db	db	db
01011001b	01011001b	01011001b
;	;	;
10100110	10100110	10100110
db	db	db
01011011b	01011011b	01011011b
;	;	;
10100111	10100111	10100111
db	db	db
01010100b	01010100b	01010100b
;	;	;
10101000	10101000	10101000
db	db	db
01010110b	01010110b	01010110b
;	;	;
10101001	10101001	10101001
db	db	db
01010101b	01010101b	01010101b
;	;	;
10101010	10101010	10101010
db	db	db
01010111b	01010111b	01010111b
;	;	;
10101011	10101011	10101011
db	db	db
01010011b	01010011b	01010011b
;	;	;
10101100	10101100	10101100
db	db	db
01011110b	01011110b	01011110b
;	;	;
10101101	10101101	10101101
db	db	db
01011101b	01011101b	01011101b
;	;	;
10101110	10101110	10101110
db	db	db
01011111b	01011111b	01011111b
;	;	;
10101111	10101111	10101111
db	db	db
01110000b	01110000b	01110000b
;	;	;
10110000	10110000	10110000
db	db	db
01110010b	01110010b	01110010b
;	;	;
10110001	10110001	10110001
db	db	db
01110001b	01110001b	01110001b
;	;	;
10110010	10110010	10110010
db	db	db
01111100b	01111100b	01111100b
;	;	;
10110011	10110011	10110011
db	db	db
01111000b	01111000b	01111000b
;	;	;
10110100	10110100	10110100
db	db	db
01111010b	01111010b	01111010b
;	;	;
10110101	10110101	10110101
db	db	db
01111001b	01111001b	01111001b
;	;	;
10110110	10110110	10110110
db	db	db
01111011b	01111011b	01111011b
;	;	;
10110111	10110111	10110111
db	db	db
01110100b	01110100b	01110100b
;	;	;
10111000	10111000	10111000
db	db	db
01110110b	01110110b	01110110b
;	;	;
10111001	10111001	10111001
db	db	db
01110101b	01110101b	01110101b
;	;	;
10111010	10111010	10111010
db	db	db
01110111b	01110111b	01110111b
;	;	;
10111011	10111011	10111011
db	db	db
01110011b	01110011b	01110011b
;	;	;
10111100	10111100	10111100
db	db	db
01111110b	01111110b	01111110b
;	;	;
10111101	10111101	10111101
db	db	db
01111101b	01111101b	01111101b
;	;	;
10111110	10111110	10111110
db	db	db
01111111b	01111111b	01111111b
;	;	;
10111111	10111111	10111111
db	db	db
00110000b	00110000b	00110000b
;	;	;
11000000	11000000	11000000
db	db	db
00110010b	00110010b	00110010b
;	;	;
11000001	11000001	11000001
db	db	db
00110001b	00110001b	00110001b
;	;	;
11000010	11000010	11000010
db	db	db
00111100b	00111100b	00111100b
;	;	;
11000011	11000011	11000011
db	db	db
00111000b	00111000b	00111000b
;	;	;
11000100	11000100	11000100
db	db	db
00111010b	00111010b	00111010b
;	;	;
11000101	11000101	11000101
db	db	db
00111001b	00111001b	00111001b
;	;	;
11000110	11000110	11000110
db	db	db
00111011b	00111011b	00111011b
;	;	;
11000111	11000111	11000111
db	db	db
00110100b	00110100b	00110100b
;	;	;
11001000	11001000	11001000
db	db	db
00110110b	00110110b	00110110b
;	;	;
11001001	11001001	11001001
db	db	db
00110101b	00110101b	00110101b
;	;	;
11001010	11001010	11001010
db	db	db
00110111b	00110111b	00110111b
;	;	;
11001011	11001011	11001011
db	db	db
00110011b	00110011b	00110011b
;	;	;
11001100	11001100	11001100
db	db	db
00111110b	00111110b	00111110b
;	;	;
11001101	11001101	11001101
db	db	db
00111101b	00111101b	00111101b
;	;	;
11001110	11001110	11001110
db	db	db
00111111b	00111111b	00111111b
;	;	;
11001111	11001111	11001111
db	db	db
11100000b	11100000b	11100000b
;	;	;
11010000	11010000	11010000
db	db	db
11100010b	11100010b	11100010b
;	;	;
11010001	11010001	11010001
db	db	db
11100001b	11100001b	11100001b
;	;	;
11010010	11010010	11010010
db	db	db
11101100b	11101100b	11101100b
;	;	;
11010011	11010011	11010011
db	db	db
11101000b	11101000b	11101000b
;	;	;
11010100	11010100	11010100
db	db	db
11101010b	11101010b	11101010b
;	;	;
11010101	11010101	11010101
db	db	db
11101001b	11101001b	11101001b
;	;	;
11010110	11010110	11010110
db	db	db
11101011b	11101011b	11101011b
;	;	;
11010111	11010111	11010111
db	db	db
11100100b	11100100b	11100100b
;	;	;
11011000	11011000	11011000
db	db	db
11100110b	11100110b	11100110b
;	;	;
11011001	11011001	11011001
db	db	db
11100101b	11100101b	11100101b
;	;	;
11011010	11011010	11011010
db	db	db
11100111b	11100111b	11100111b
;	;	;
11011011	11011011	11011011
db	db	db
11100011b	11100011b	11100011b
;	;	;
11011100	11011100	11011100
db	db	db
11101110b	11101110b	11101110b
;	;	;
11011101	11011101	11011101
db	db	db
11101101b	11101101b	11101101b
;	;	;
11011110	11011110	11011110
db	db	db
11101111b	11101111b	11101111b
;	;	;
11011111	11011111	11011111
db	db	db
11010000b	11010000b	11010000b
;	;	;
11100000	11100000	11100000
db	db	db
11010010b	11010010b	11010010b
;	;	;
11100001	11100001	11100001
db	db	db
11010001b	11010001b	11010001b
;	;	;
11100010	11100010	11100010
db	db	db
11011100b	11011100b	11011100b
;	;	;
11100011	11100011	11100011
db	db	db
11011000b	11011000b	11011000b
;	;	;
11100100	11100100	11100100
db	db	db
11011010b	11011010b	11011010b
;	;	;
11100101	11100101	11100101
db	db	db
11011001b	11011001b	11011001b
;	;	;
11100110	11100110	11100110
db	db	db
11011011b	11011011b	11011011b
;	;	;
11100111	11100111	11100111
db	db	db
11010100b	11010100b	11010100b
;	;	;
11101000	11101000	11101000
db	db	db
11010110b	11010110b	11010110b
;	;	;
11101001	11101001	11101001
db	db	db
11010101b	11010101b	11010101b
;	;	;
11101010	11101010	11101010
db	db	db
11010111b	11010111b	11010111b
;	;	;
11101011	11101011	11101011
db	db	db
11010011b	11010011b	11010011b
;	;	;
11101100	11101100	11101100
db	db	db
11011110b	11011110b	11011110b
;	;	;
11101101	11101101	11101101
db	db	db
11011101b	11011101b	11011101b
;	;	;
11101110	11101110	11101110
db	db	db
11011111b	11011111b	11011111b
;	;	;
11101111	11101111	11101111
db	db	db
11110000b	11110000b	11110000b
;	;	;
11110000	11110000	11110000
db	db	db
11110010b	11110010b	11110010b
;	;	;
11110001	11110001	11110001
db	db	db
11110001b	11110001b	11110001b
;	;	;
11110010	11110010	11110010
db	db	db
11111100b	11111100b	11111100b
;	;	;
11110011	11110011	11110011
db	db	db
11111000b	11111000b	11111000b
;	;	;
11110100	11110100	11110100
db	db	db
11111010b	11111010b	11111010b
;	;	;
11110101	11110101	11110101
db	db	db
11111001b	11111001b	11111001b
;	;	;
11110110	11110110	11110110
db	db	db
11111011b	11111011b	11111011b
;	;	;
11110111	11110111	11110111
db	db	db
11110100b	11110100b	11110100b
;	;	;
11111000	11111000	11111000
db	db	db
11110110b	11110110b	11110110b
;	;	;
11111001	11111001	11111001
db	db	db
11110101b	11110101b	11110101b
;	;	;
11111010	11111010	11111010
db	db	db
11110111b	11110111b	11110111b
;	;	;
11111011	11111011	11111011
db	db	db
11110011b	11110011b	11110011b
;	;	;
11111100	11111100	11111100
db	db	db
11111110b	11111110b	11111110b
;	;	;
11111101	11111101	11111101
db	db	db
11111101b	11111101b	11111101b
;	;	;
11111110	11111110	11111110
db	db	db
11111111b	11111111b	11111111b
;	;	;
11111111	11111111	11111111

maxbyte	maxbyt	maxbyte
equ	equ	equ
55	55	55
lineno	lineno	lineno
equ	equ	equ
23	23	23

srcptr	srcptr	srcptr
dw	dw	dw
offset	offset	offset
buffer1	buffer1	buffer1
desptr	desptr	desptr
dw	dw	dw
offset	offset	offset
buffer2	buffer2	buffer2

savebuff	savebuff	savebuff
:	:	:

db	db	db
maxbyte	maxbyt	maxbyte
*	*	*
(	(	(
lineno	lineno	lineno
+	+	+
1	1	1
)	)	)
dup	dup	dup
(	(	(
0	0	0
)	)	)

buffer1	buffer1	buffer1
:	:	:

db	db	db
maxbyte	maxbyt	maxbyte
*	*	*
(	(	(
lineno	lineno	lineno
+	+	+
1	1	1
)	)	)
dup	dup	dup
(	(	(
0	0	0
)	)	)

db	db	db
256	256	256
dup	dup	dup
(	(	(
0	0	0
)	)	)

buffer2	buffer2	buffer2
:	:	:

db	db	db
maxbyte	maxbyt	maxbyte
*	*	*
(	(	(
lineno	lineno	lineno
+	+	+
1	1	1
)	)	)
dup	dup	dup
(	(	(
0	0	0
)	)	)

db	db	db
256	256	256
dup	dup	dup
(	(	(
0	0	0
)	)	)

;	;	;
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-

;	;	;

;	;	;

;	;	;

;	;	;
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-

data	data	data
:	:	:

db	db	db
"	"	"
"	"	"

db	db	db
"	"	"
"	"	"

db	db	db
"	"	"
"	"	"

db	db	db
"	"	"
this	this	this
is	is	is
a	a	a
test	test	test
for	for	for
a	a	a
lattice	lattic	lattice
gas	gas	gas
based	base	based
encryption	encrypt	encryption
"	"	"

db	db	db
"	"	"
algorithm	algorithm	algorithm
.	.	.

the	the	the
data	data	data
is	is	is
encoded	encod	encoded
as	as	a
particles	particl	particle
of	of	of
a	a	a
"	"	"
db	db	db
"	"	"
digital	digit	digital
gas	gas	gas
,	,	,
whose	whose	whose
time	time	time
evolution	evolut	evolution
is	is	is
then	then	then
simulated	simul	simulated
"	"	"
db	db	db
"	"	"
with	with	with
a	a	a
cellular	cellular	cellular
-	-	-
automaton	automaton	automaton
type	type	type
algorithm	algorithm	algorithm
.	.	.

decryption	decrypt	decryption
"	"	"
db	db	db
"	"	"
can	can	can
be	be	be
achieved	achiev	achieved
by	by	by
running	run	running
the	the	the
simulation	simul	simulation
in	in	in
reverse	revers	reverse
.	.	.

"	"	"
db	db	db
"	"	"
a	a	a
thermodynamic	thermodynam	thermodynamic
argument	argument	argument
ensures	ensur	ensures
that	that	that
even	even	even
if	if	if
a	a	a
single	singl	single
"	"	"
db	db	db
"	"	"
bit	bit	bit
is	is	is
flipped	flip	flipped
,	,	,
no	no	no
decryption	decrypt	decryption
of	of	of
the	the	the
data	data	data
is	is	is
possible	possibl	possible
"	"	"
db	db	db
"	"	"
"	"	"
db	db	db
"	"	"
after	after	after
the	the	the
gas	gas	gas
is	is	is
let	let	let
to	to	to
evolve	evolv	evolve
for	for	for
256	256	256
timesteps	timestep	timesteps
,	,	,
"	"	"
db	db	db
"	"	"
one	one	one
can	can	can
either	either	either
run	run	run
the	the	the
reverse	revers	reverse
evolution	evolut	evolution
by	by	by
pressing	press	pressing
"	"	"
db	db	db
"	"	"
space	space	space
,	,	,
or	or	or
flip	flip	flip
a	a	a
bit	bit	bit
and	and	and
then	then	then
run	run	run
by	by	by
pressing	press	pressing
'	'	'
0	0	0
'	'	'
"	"	"
db	db	db
"	"	"
"	"	"
db	db	db
"	"	"
for	for	for
a	a	a
cryptographic	cryptograph	cryptographic
application	applic	application
,	,	,
the	the	the
key	key	key
would	would	would
consist	consist	consist
"	"	"
db	db	db
"	"	"
of	of	of
the	the	the
number	number	number
of	of	of
time	time	time
steps	step	step
and	and	and
the	the	the
time	time	time
and	and	and
location	locat	location
"	"	"
db	db	db
"	"	"
of	of	of
specific	specif	specific
bit	bit	bit
inversions	invers	inversion
.	.	.

"	"	"
db	db	db
"	"	"
"	"	"
db	db	db
"	"	"
"	"	"
db	db	db
"	"	"
"	"	"
db	db	db
"	"	"
"	"	"
db	db	db
"	"	"
"	"	"

;	;	;

;	;	;
fill	fill	fill
the	the	the
gas	gas	gas
with	with	with
a	a	a
piece	piec	piece
of	of	of
code	code	code

;	;	;
initgas	initga	initgas
:	:	:

mov	mov	mov
di	di	di
,	,	,
cs	cs	c
:	:	:
srcptr	srcptr	srcptr

mov	mov	mov
si	si	si
,	,	,
offset	offset	offset
data	data	data

mov	mov	mov
cx	cx	cx
,	,	,
lineno	lineno	lineno
ig0	ig0	ig0
:	:	:

push	push	push
di	di	di

push	push	push
cx	cx	cx

mov	mov	mov
cx	cx	cx
,	,	,
maxbyte	maxbyt	maxbyte
ig1	ig1	ig1
:	:	:

mov	mov	mov
al	al	al
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
]	]	]

mov	mov	mov
cs	cs	c
:	:	:
[	[	[
di	di	di
]	]	]
,	,	,
al	al	al

inc	inc	inc
si	si	si

inc	inc	inc
di	di	di

loop	loop	loop
ig1	ig1	ig1

pop	pop	pop
cx	cx	cx

pop	pop	pop
di	di	di

add	add	add
di	di	di
,	,	,
maxbyte	maxbyt	maxbyte

loop	loop	loop
ig0	ig0	ig0

mov	mov	mov
si	si	si
,	,	,
cs	cs	c
:	:	:
srcptr	srcptr	srcptr

mov	mov	mov
di	di	di
,	,	,
offset	offset	offset
initgas	initga	initgas

mov	mov	mov
cx	cx	cx
,	,	,
maxbyte	maxbyt	maxbyte
*	*	*
3	3	3

mov	mov	mov
al	al	al
,	,	,
0	0	0
lg2	lg2	lg2
:	:	:

mov	mov	mov
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
si	si	si
]	]	]
,	,	,
al	al	al

not	not	not
al	al	al

inc	inc	inc
si	si	si

loop	loop	loop
lg2	lg2	lg2

ret	ret	ret

;	;	;
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-

;	;	;

;	;	;
display	display	display
gas	gas	gas
molecules	molecul	molecule
bouncing	bounc	bouncing
around	around	around

;	;	;
showgas	showga	showgas
:	:	:

push	push	push
es	es	e

push	push	push
si	si	si

push	push	push
di	di	di

push	push	push
cx	cx	cx

push	push	push
bx	bx	bx

mov	mov	mov
ax	ax	ax
,	,	,
0b800h	0b800h	0b800h

mov	mov	mov
es	es	e
,	,	,
ax	ax	ax

mov	mov	mov
si	si	si
,	,	,
cs	cs	c
:	:	:
srcptr	srcptr	srcptr

mov	mov	mov
di	di	di
,	,	,
160	160	160
*	*	*
2	2	2
+	+	+
10	10	10
*	*	*
2	2	2

mov	mov	mov
cx	cx	cx
,	,	,
lineno	lineno	lineno
-	-	-
3	3	3

add	add	add
si	si	si
,	,	,
maxbyte	maxbyt	maxbyte
*	*	*
3	3	3
sg1	sg1	sg1
:	:	:

push	push	push
cx	cx	cx

push	push	push
di	di	di

mov	mov	mov
cx	cx	cx
,	,	,
maxbyte	maxbyt	maxbyte
sg2	sg2	sg2
:	:	:

mov	mov	mov
al	al	al
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
]	]	]

mov	mov	mov
byte	byte	byte
ptr	ptr	ptr
es	es	e
:	:	:
[	[	[
di	di	di
]	]	]
,	,	,
al	al	al

inc	inc	inc
si	si	si

add	add	add
di	di	di
,	,	,
2	2	2

dec	dec	dec
cx	cx	cx

jnz	jnz	jnz
sg2	sg2	sg2

pop	pop	pop
di	di	di

pop	pop	pop
cx	cx	cx

add	add	add
di	di	di
,	,	,
160	160	160

loop	loop	loop
sg1	sg1	sg1

pop	pop	pop
bx	bx	bx

pop	pop	pop
cx	cx	cx

pop	pop	pop
di	di	di

pop	pop	pop
si	si	si

pop	pop	pop
es	es	e

ret	ret	ret

;	;	;
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-

;	;	;

;	;	;
cs	cs	c
:	:	:
si	si	si
-	-	-
>	>	>
sourse	sours	sourse
of	of	of
data	data	data

;	;	;
cs	cs	c
:	:	:
di	di	di
-	-	-
>	>	>
destination	destin	destination
of	of	of
data	data	data

;	;	;
scanonemiddleline	scanonemiddlelin	scanonemiddleline
:	:	:

;	;	;

;	;	;
first	first	first
byte	byte	byte
is	is	is
a	a	a
special	special	special
case	case	case
because	becaus	because
of	of	of
warparound	warparound	warparound

;	;	;

mov	mov	mov
bl	bl	bl
,	,	,
0	0	0
;	;	;
al	al	al
is	is	is
the	the	the
"	"	"
assembled	assembl	assembled
"	"	"
byte	byte	byte
.	.	.

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
maxbyte	maxbyt	maxbyte
]	]	]
;	;	;
north	north	north
is	is	is
one	one	one
line	line	line
"	"	"
up	up	up
"	"	"
(	(	(
lower	lower	lower
)	)	)

and	and	and
bh	bh	bh
,	,	,
10001000b	10001000b	10001000b
;	;	;
and	and	and
at	at	at
bits	bit	bit
7	7	7
and	and	and
3	3	3

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
or	or	or
them	them	them
into	into	into
the	the	the
assembled	assembl	assembled
byte	byte	byte

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
maxbyte	maxbyt	maxbyte
]	]	]
;	;	;
south	south	south
is	is	is
one	one	one
line	line	line
"	"	"
down	down	down
"	"	"
(	(	(
higher	higher	higher
)	)	)

and	and	and
bh	bh	bh
,	,	,
01000100b	01000100b	01000100b
;	;	;
and	and	and
at	at	at
bits	bit	bit
6	6	6
and	and	and
2	2	2

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
place	place	place
the	the	the
stuff	stuff	stuff
into	into	into
al	al	al

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
(	(	(
maxbyte	maxbyt	maxbyte
-	-	-
1	1	1
)	)	)
]	]	]
;	;	;
west	west	west
is	is	is
one	one	one
byte	byte	byte
"	"	"
left	left	left
"	"	"
(	(	(
lower	lower	lower
)	)	)

and	and	and
bh	bh	bh
,	,	,
00100010b	00100010b	00100010b
;	;	;
and	and	and
at	at	at
bits	bit	bit
5	5	5
and	and	and
1	1	1

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
1	1	1
]	]	]
;	;	;
east	east	east
is	is	is
one	one	one
byte	byte	byte
"	"	"
right	right	right
"	"	"
(	(	(
higher	higher	higher
)	)	)

and	and	and
bh	bh	bh
,	,	,
00010001b	00010001b	00010001b
;	;	;
and	and	and
at	at	at
bits	bit	bit
4	4	4
and	and	and
0	0	0

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
0	0	0

mov	mov	mov
al	al	al
,	,	,
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
bx	bx	bx
+	+	+
offset	offset	offset
hpprule	hpprule	hpprule
]	]	]

mov	mov	mov
cs	cs	c
:	:	:
[	[	[
di	di	di
]	]	]
,	,	,
al	al	al

inc	inc	inc
si	si	si

inc	inc	inc
di	di	di

;	;	;

;	;	;
middle	middl	middle
bytes	byte	byte
can	can	can
be	be	be
handled	handl	handled
in	in	in
a	a	a
loop	loop	loop

;	;	;

mov	mov	mov
cx	cx	cx
,	,	,
maxbyte	maxbyt	maxbyte
-	-	-
2	2	2
sol1	sol1	sol1
:	:	:

mov	mov	mov
bl	bl	bl
,	,	,
0	0	0
;	;	;
al	al	al
is	is	is
the	the	the
"	"	"
assembled	assembl	assembled
"	"	"
byte	byte	byte
.	.	.

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
maxbyte	maxbyt	maxbyte
]	]	]
;	;	;
north	north	north
is	is	is
one	one	one
line	line	line
"	"	"
up	up	up
"	"	"
(	(	(
lower	lower	lower
)	)	)

and	and	and
bh	bh	bh
,	,	,
10001000b	10001000b	10001000b
;	;	;
and	and	and
at	at	at
bits	bit	bit
7	7	7
and	and	and
3	3	3

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
or	or	or
them	them	them
into	into	into
the	the	the
assembled	assembl	assembled
byte	byte	byte

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
maxbyte	maxbyt	maxbyte
]	]	]
;	;	;
south	south	south
is	is	is
one	one	one
line	line	line
"	"	"
down	down	down
"	"	"
(	(	(
higher	higher	higher
)	)	)

and	and	and
bh	bh	bh
,	,	,
01000100b	01000100b	01000100b
;	;	;
and	and	and
at	at	at
bits	bit	bit
6	6	6
and	and	and
2	2	2

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
place	place	place
the	the	the
stuff	stuff	stuff
into	into	into
al	al	al

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
1	1	1
]	]	]
;	;	;
west	west	west
is	is	is
one	one	one
byte	byte	byte
"	"	"
left	left	left
"	"	"
(	(	(
lower	lower	lower
)	)	)

and	and	and
bh	bh	bh
,	,	,
00100010b	00100010b	00100010b
;	;	;
and	and	and
at	at	at
bits	bit	bit
5	5	5
and	and	and
1	1	1

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
1	1	1
]	]	]
;	;	;
east	east	east
is	is	is
one	one	one
byte	byte	byte
"	"	"
right	right	right
"	"	"
(	(	(
higher	higher	higher
)	)	)

and	and	and
bh	bh	bh
,	,	,
00010001b	00010001b	00010001b
;	;	;
and	and	and
at	at	at
bits	bit	bit
4	4	4
and	and	and
0	0	0

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
0	0	0

mov	mov	mov
al	al	al
,	,	,
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
bx	bx	bx
+	+	+
offset	offset	offset
hpprule	hpprule	hpprule
]	]	]

mov	mov	mov
cs	cs	c
:	:	:
[	[	[
di	di	di
]	]	]
,	,	,
al	al	al

inc	inc	inc
si	si	si

inc	inc	inc
di	di	di

loop	loop	loop
sol1	sol1	sol1

;	;	;

;	;	;
last	last	last
byte	byte	byte
is	is	is
also	also	also
special	special	special

;	;	;

mov	mov	mov
bl	bl	bl
,	,	,
0	0	0
;	;	;
al	al	al
is	is	is
the	the	the
"	"	"
assembled	assembl	assembled
"	"	"
byte	byte	byte
.	.	.

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
maxbyte	maxbyt	maxbyte
]	]	]
;	;	;
north	north	north
is	is	is
one	one	one
line	line	line
"	"	"
up	up	up
"	"	"
(	(	(
lower	lower	lower
)	)	)

and	and	and
bh	bh	bh
,	,	,
10001000b	10001000b	10001000b
;	;	;
and	and	and
at	at	at
bits	bit	bit
7	7	7
and	and	and
3	3	3

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
or	or	or
them	them	them
into	into	into
the	the	the
assembled	assembl	assembled
byte	byte	byte

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
maxbyte	maxbyt	maxbyte
]	]	]
;	;	;
south	south	south
is	is	is
one	one	one
line	line	line
"	"	"
down	down	down
"	"	"
(	(	(
higher	higher	higher
)	)	)

and	and	and
bh	bh	bh
,	,	,
01000100b	01000100b	01000100b
;	;	;
and	and	and
at	at	at
bits	bit	bit
6	6	6
and	and	and
2	2	2

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
place	place	place
the	the	the
stuff	stuff	stuff
into	into	into
al	al	al

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
1	1	1
]	]	]
;	;	;
west	west	west
is	is	is
one	one	one
byte	byte	byte
"	"	"
left	left	left
"	"	"
(	(	(
lower	lower	lower
)	)	)

and	and	and
bh	bh	bh
,	,	,
00100010b	00100010b	00100010b
;	;	;
and	and	and
at	at	at
bits	bit	bit
5	5	5
and	and	and
1	1	1

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
(	(	(
maxbyte	maxbyt	maxbyte
-	-	-
1	1	1
)	)	)
]	]	]
;	;	;
east	east	east
is	is	is
one	one	one
byte	byte	byte
"	"	"
right	right	right
"	"	"
(	(	(
higher	higher	higher
)	)	)

and	and	and
bh	bh	bh
,	,	,
00010001b	00010001b	00010001b
;	;	;
and	and	and
at	at	at
bits	bit	bit
4	4	4
and	and	and
0	0	0

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
0	0	0

mov	mov	mov
al	al	al
,	,	,
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
bx	bx	bx
+	+	+
offset	offset	offset
hpprule	hpprule	hpprule
]	]	]

mov	mov	mov
cs	cs	c
:	:	:
[	[	[
di	di	di
]	]	]
,	,	,
al	al	al

inc	inc	inc
si	si	si

inc	inc	inc
di	di	di

ret	ret	ret

;	;	;
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-

;	;	;

;	;	;
cs	cs	c
:	:	:
si	si	si
-	-	-
>	>	>
sourse	sours	sourse
of	of	of
data	data	data

;	;	;
cs	cs	c
:	:	:
di	di	di
-	-	-
>	>	>
destination	destin	destination
of	of	of
data	data	data

;	;	;
scanfirstline	scanfirstlin	scanfirstline
:	:	:

;	;	;

;	;	;
first	first	first
byte	byte	byte
is	is	is
a	a	a
special	special	special
case	case	case
because	becaus	because
of	of	of
warparound	warparound	warparound

;	;	;

mov	mov	mov
bl	bl	bl
,	,	,
0	0	0

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
maxbyte	maxbyt	maxbyte
*	*	*
(	(	(
lineno	lineno	lineno
-	-	-
1	1	1
)	)	)
]	]	]

and	and	and
bh	bh	bh
,	,	,
10001000b	10001000b	10001000b
;	;	;
and	and	and
at	at	at
bits	bit	bit
7	7	7
and	and	and
3	3	3

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
or	or	or
them	them	them
into	into	into
the	the	the
assembled	assembl	assembled
byte	byte	byte

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
maxbyte	maxbyt	maxbyte
]	]	]

and	and	and
bh	bh	bh
,	,	,
01000100b	01000100b	01000100b
;	;	;
and	and	and
at	at	at
bits	bit	bit
6	6	6
and	and	and
2	2	2

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
place	place	place
the	the	the
stuff	stuff	stuff
into	into	into
al	al	al

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
maxbyte	maxbyt	maxbyte
-	-	-
1	1	1
]	]	]
;	;	;
west	west	west
is	is	is
one	one	one
byte	byte	byte
"	"	"
left	left	left
"	"	"
(	(	(
lower	lower	lower
)	)	)

and	and	and
bh	bh	bh
,	,	,
00100010b	00100010b	00100010b
;	;	;
and	and	and
at	at	at
bits	bit	bit
5	5	5
and	and	and
1	1	1

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
1	1	1
]	]	]
;	;	;
east	east	east
is	is	is
one	one	one
byte	byte	byte
"	"	"
right	right	right
"	"	"
(	(	(
higher	higher	higher
)	)	)

and	and	and
bh	bh	bh
,	,	,
00010001b	00010001b	00010001b
;	;	;
and	and	and
at	at	at
bits	bit	bit
4	4	4
and	and	and
0	0	0

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
0	0	0

mov	mov	mov
al	al	al
,	,	,
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
bx	bx	bx
+	+	+
offset	offset	offset
hpprule	hpprule	hpprule
]	]	]

mov	mov	mov
cs	cs	c
:	:	:
[	[	[
di	di	di
]	]	]
,	,	,
al	al	al

inc	inc	inc
si	si	si

inc	inc	inc
di	di	di

;	;	;

;	;	;
middle	middl	middle
bytes	byte	byte
can	can	can
be	be	be
handled	handl	handled
in	in	in
a	a	a
loop	loop	loop

;	;	;

mov	mov	mov
cx	cx	cx
,	,	,
maxbyte	maxbyt	maxbyte
-	-	-
2	2	2
sfl1	sfl1	sfl1
:	:	:

mov	mov	mov
bl	bl	bl
,	,	,
0	0	0
;	;	;
al	al	al
is	is	is
the	the	the
"	"	"
assembled	assembl	assembled
"	"	"
byte	byte	byte
.	.	.

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
maxbyte	maxbyt	maxbyte
*	*	*
(	(	(
lineno	lineno	lineno
-	-	-
1	1	1
)	)	)
]	]	]

and	and	and
bh	bh	bh
,	,	,
10001000b	10001000b	10001000b
;	;	;
and	and	and
at	at	at
bits	bit	bit
7	7	7
and	and	and
3	3	3

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
or	or	or
them	them	them
into	into	into
the	the	the
assembled	assembl	assembled
byte	byte	byte

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
maxbyte	maxbyt	maxbyte
]	]	]

and	and	and
bh	bh	bh
,	,	,
01000100b	01000100b	01000100b
;	;	;
and	and	and
at	at	at
bits	bit	bit
6	6	6
and	and	and
2	2	2

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
place	place	place
the	the	the
stuff	stuff	stuff
into	into	into
al	al	al

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
1	1	1
]	]	]
;	;	;
west	west	west
is	is	is
one	one	one
byte	byte	byte
"	"	"
left	left	left
"	"	"
(	(	(
lower	lower	lower
)	)	)

and	and	and
bh	bh	bh
,	,	,
00100010b	00100010b	00100010b
;	;	;
and	and	and
at	at	at
bits	bit	bit
5	5	5
and	and	and
1	1	1

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
1	1	1
]	]	]
;	;	;
east	east	east
is	is	is
one	one	one
byte	byte	byte
"	"	"
right	right	right
"	"	"
(	(	(
higher	higher	higher
)	)	)

and	and	and
bh	bh	bh
,	,	,
00010001b	00010001b	00010001b
;	;	;
and	and	and
at	at	at
bits	bit	bit
4	4	4
and	and	and
0	0	0

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
0	0	0

mov	mov	mov
al	al	al
,	,	,
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
bx	bx	bx
+	+	+
offset	offset	offset
hpprule	hpprule	hpprule
]	]	]

mov	mov	mov
cs	cs	c
:	:	:
[	[	[
di	di	di
]	]	]
,	,	,
al	al	al

inc	inc	inc
si	si	si

inc	inc	inc
di	di	di

loop	loop	loop
sfl1	sfl1	sfl1

;	;	;

;	;	;
last	last	last
byte	byte	byte
is	is	is
also	also	also
special	special	special

;	;	;

mov	mov	mov
bl	bl	bl
,	,	,
0	0	0
;	;	;
al	al	al
is	is	is
the	the	the
"	"	"
assembled	assembl	assembled
"	"	"
byte	byte	byte
.	.	.

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
maxbyte	maxbyt	maxbyte
*	*	*
(	(	(
lineno	lineno	lineno
-	-	-
1	1	1
)	)	)
]	]	]

and	and	and
bh	bh	bh
,	,	,
10001000b	10001000b	10001000b
;	;	;
and	and	and
at	at	at
bits	bit	bit
7	7	7
and	and	and
3	3	3

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
or	or	or
them	them	them
into	into	into
the	the	the
assembled	assembl	assembled
byte	byte	byte

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
maxbyte	maxbyt	maxbyte
]	]	]

and	and	and
bh	bh	bh
,	,	,
01000100b	01000100b	01000100b
;	;	;
and	and	and
at	at	at
bits	bit	bit
6	6	6
and	and	and
2	2	2

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
place	place	place
the	the	the
stuff	stuff	stuff
into	into	into
al	al	al

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
1	1	1
]	]	]
;	;	;
west	west	west
is	is	is
one	one	one
byte	byte	byte
"	"	"
left	left	left
"	"	"
(	(	(
lower	lower	lower
)	)	)

and	and	and
bh	bh	bh
,	,	,
00100010b	00100010b	00100010b
;	;	;
and	and	and
at	at	at
bits	bit	bit
5	5	5
and	and	and
1	1	1

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
(	(	(
maxbyte	maxbyt	maxbyte
-	-	-
1	1	1
)	)	)
]	]	]
;	;	;
east	east	east
is	is	is
one	one	one
byte	byte	byte
"	"	"
right	right	right
"	"	"
(	(	(
higher	higher	higher
)	)	)

and	and	and
bh	bh	bh
,	,	,
00010001b	00010001b	00010001b
;	;	;
and	and	and
at	at	at
bits	bit	bit
4	4	4
and	and	and
0	0	0

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
0	0	0

mov	mov	mov
al	al	al
,	,	,
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
bx	bx	bx
+	+	+
offset	offset	offset
hpprule	hpprule	hpprule
]	]	]

mov	mov	mov
cs	cs	c
:	:	:
[	[	[
di	di	di
]	]	]
,	,	,
al	al	al

ret	ret	ret

;	;	;
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-

;	;	;

;	;	;
cs	cs	c
:	:	:
si	si	si
-	-	-
>	>	>
sourse	sours	sourse
of	of	of
data	data	data

;	;	;
cs	cs	c
:	:	:
di	di	di
-	-	-
>	>	>
destination	destin	destination
of	of	of
data	data	data

;	;	;
scanlastline	scanlastlin	scanlastline
:	:	:

;	;	;

;	;	;
first	first	first
byte	byte	byte
is	is	is
a	a	a
special	special	special
case	case	case
because	becaus	because
of	of	of
warparound	warparound	warparound

;	;	;

mov	mov	mov
bl	bl	bl
,	,	,
0	0	0
;	;	;
al	al	al
is	is	is
the	the	the
"	"	"
assembled	assembl	assembled
"	"	"
byte	byte	byte
.	.	.

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
maxbyte	maxbyt	maxbyte
]	]	]

and	and	and
bh	bh	bh
,	,	,
10001000b	10001000b	10001000b
;	;	;
and	and	and
at	at	at
bits	bit	bit
7	7	7
and	and	and
3	3	3

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
or	or	or
them	them	them
into	into	into
the	the	the
assembled	assembl	assembled
byte	byte	byte

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
maxbyte	maxbyt	maxbyte
*	*	*
(	(	(
lineno	lineno	lineno
-	-	-
1	1	1
)	)	)
]	]	]

and	and	and
bh	bh	bh
,	,	,
01000100b	01000100b	01000100b
;	;	;
and	and	and
at	at	at
bits	bit	bit
6	6	6
and	and	and
2	2	2

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
place	place	place
the	the	the
stuff	stuff	stuff
into	into	into
al	al	al

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
(	(	(
maxbyte	maxbyt	maxbyte
-	-	-
1	1	1
)	)	)
]	]	]
;	;	;
west	west	west
is	is	is
one	one	one
byte	byte	byte
"	"	"
left	left	left
"	"	"
(	(	(
lower	lower	lower
)	)	)

and	and	and
bh	bh	bh
,	,	,
00100010b	00100010b	00100010b
;	;	;
and	and	and
at	at	at
bits	bit	bit
5	5	5
and	and	and
1	1	1

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
1	1	1
]	]	]
;	;	;
east	east	east
is	is	is
one	one	one
byte	byte	byte
"	"	"
right	right	right
"	"	"
(	(	(
higher	higher	higher
)	)	)

and	and	and
bh	bh	bh
,	,	,
00010001b	00010001b	00010001b
;	;	;
and	and	and
at	at	at
bits	bit	bit
4	4	4
and	and	and
0	0	0

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
0	0	0

mov	mov	mov
al	al	al
,	,	,
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
bx	bx	bx
+	+	+
offset	offset	offset
hpprule	hpprule	hpprule
]	]	]

mov	mov	mov
cs	cs	c
:	:	:
[	[	[
di	di	di
]	]	]
,	,	,
al	al	al

inc	inc	inc
si	si	si

inc	inc	inc
di	di	di

;	;	;

;	;	;
middle	middl	middle
bytes	byte	byte
can	can	can
be	be	be
handled	handl	handled
in	in	in
a	a	a
loop	loop	loop

;	;	;

mov	mov	mov
cx	cx	cx
,	,	,
maxbyte	maxbyt	maxbyte
-	-	-
2	2	2
sll1	sll1	sll1
:	:	:

mov	mov	mov
bl	bl	bl
,	,	,
0	0	0
;	;	;
al	al	al
is	is	is
the	the	the
"	"	"
assembled	assembl	assembled
"	"	"
byte	byte	byte
.	.	.

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
maxbyte	maxbyt	maxbyte
]	]	]

and	and	and
bh	bh	bh
,	,	,
10001000b	10001000b	10001000b
;	;	;
and	and	and
at	at	at
bits	bit	bit
7	7	7
and	and	and
3	3	3

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
or	or	or
them	them	them
into	into	into
the	the	the
assembled	assembl	assembled
byte	byte	byte

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
maxbyte	maxbyt	maxbyte
*	*	*
(	(	(
lineno	lineno	lineno
-	-	-
1	1	1
)	)	)
]	]	]

and	and	and
bh	bh	bh
,	,	,
01000100b	01000100b	01000100b
;	;	;
and	and	and
at	at	at
bits	bit	bit
6	6	6
and	and	and
2	2	2

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
place	place	place
the	the	the
stuff	stuff	stuff
into	into	into
al	al	al

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
1	1	1
]	]	]
;	;	;
west	west	west
is	is	is
one	one	one
byte	byte	byte
"	"	"
left	left	left
"	"	"
(	(	(
lower	lower	lower
)	)	)

and	and	and
bh	bh	bh
,	,	,
00100010b	00100010b	00100010b
;	;	;
and	and	and
at	at	at
bits	bit	bit
5	5	5
and	and	and
1	1	1

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
1	1	1
]	]	]
;	;	;
east	east	east
is	is	is
one	one	one
byte	byte	byte
"	"	"
right	right	right
"	"	"
(	(	(
higher	higher	higher
)	)	)

and	and	and
bh	bh	bh
,	,	,
00010001b	00010001b	00010001b
;	;	;
and	and	and
at	at	at
bits	bit	bit
4	4	4
and	and	and
0	0	0

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
0	0	0

mov	mov	mov
al	al	al
,	,	,
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
bx	bx	bx
+	+	+
offset	offset	offset
hpprule	hpprule	hpprule
]	]	]

mov	mov	mov
cs	cs	c
:	:	:
[	[	[
di	di	di
]	]	]
,	,	,
al	al	al

inc	inc	inc
si	si	si

inc	inc	inc
di	di	di

loop	loop	loop
sll1	sll1	sll1

;	;	;

;	;	;
last	last	last
byte	byte	byte
is	is	is
also	also	also
special	special	special

;	;	;

mov	mov	mov
bl	bl	bl
,	,	,
0	0	0
;	;	;
al	al	al
is	is	is
the	the	the
"	"	"
assembled	assembl	assembled
"	"	"
byte	byte	byte
.	.	.

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
maxbyte	maxbyt	maxbyte
]	]	]

and	and	and
bh	bh	bh
,	,	,
10001000b	10001000b	10001000b
;	;	;
and	and	and
at	at	at
bits	bit	bit
7	7	7
and	and	and
3	3	3

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
or	or	or
them	them	them
into	into	into
the	the	the
assembled	assembl	assembled
byte	byte	byte

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
maxbyte	maxbyt	maxbyte
*	*	*
(	(	(
lineno	lineno	lineno
-	-	-
1	1	1
)	)	)
]	]	]

and	and	and
bh	bh	bh
,	,	,
01000100b	01000100b	01000100b
;	;	;
and	and	and
at	at	at
bits	bit	bit
6	6	6
and	and	and
2	2	2

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh
;	;	;
place	place	place
the	the	the
stuff	stuff	stuff
into	into	into
al	al	al

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
1	1	1
]	]	]
;	;	;
west	west	west
is	is	is
one	one	one
byte	byte	byte
"	"	"
left	left	left
"	"	"
(	(	(
lower	lower	lower
)	)	)

and	and	and
bh	bh	bh
,	,	,
00100010b	00100010b	00100010b
;	;	;
and	and	and
at	at	at
bits	bit	bit
5	5	5
and	and	and
1	1	1

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
-	-	-
(	(	(
maxbyte	maxbyt	maxbyte
-	-	-
1	1	1
)	)	)
]	]	]
;	;	;
east	east	east
is	is	is
one	one	one
byte	byte	byte
"	"	"
right	right	right
"	"	"
(	(	(
higher	higher	higher
)	)	)

and	and	and
bh	bh	bh
,	,	,
00010001b	00010001b	00010001b
;	;	;
and	and	and
at	at	at
bits	bit	bit
4	4	4
and	and	and
0	0	0

or	or	or
bl	bl	bl
,	,	,
bh	bh	bh

mov	mov	mov
bh	bh	bh
,	,	,
0	0	0

mov	mov	mov
al	al	al
,	,	,
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
bx	bx	bx
+	+	+
offset	offset	offset
hpprule	hpprule	hpprule
]	]	]

mov	mov	mov
cs	cs	c
:	:	:
[	[	[
di	di	di
]	]	]
,	,	,
al	al	al

inc	inc	inc
si	si	si

inc	inc	inc
di	di	di

ret	ret	ret

;	;	;
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-

;	;	;

;	;	;
invert	invert	invert
all	all	all
velocities	veloc	velocity
in	in	in
the	the	the
gas	gas	gas

;	;	;
invertall	invertal	invertall
:	:	:

push	push	push
bx	bx	bx

push	push	push
cx	cx	cx

push	push	push
si	si	si

mov	mov	mov
si	si	si
,	,	,
cs	cs	c
:	:	:
srcptr	srcptr	srcptr

mov	mov	mov
bx	bx	bx
,	,	,
0	0	0

mov	mov	mov
cx	cx	cx
,	,	,
lineno	lineno	lineno
ia1	ia1	ia1
:	:	:

push	push	push
cx	cx	cx

mov	mov	mov
cx	cx	cx
,	,	,
maxbyte	maxbyt	maxbyte
ia2	ia2	ia2
:	:	:

mov	mov	mov
bl	bl	bl
,	,	,
cs	cs	c
:	:	:
[	[	[
si	si	si
]	]	]

mov	mov	mov
al	al	al
,	,	,
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
bx	bx	bx
+	+	+
(	(	(
offset	offset	offset
wallrule	wallrul	wallrule
)	)	)
]	]	]

mov	mov	mov
cs	cs	c
:	:	:
[	[	[
si	si	si
]	]	]
,	,	,
al	al	al

inc	inc	inc
si	si	si

loop	loop	loop
ia2	ia2	ia2

pop	pop	pop
cx	cx	cx

loop	loop	loop
ia1	ia1	ia1

pop	pop	pop
si	si	si

pop	pop	pop
cx	cx	cx

pop	pop	pop
bx	bx	bx

ret	ret	ret

;	;	;
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-

;	;	;

;	;	;
iterateonce	iterateonc	iterateonce
:	:	:

mov	mov	mov
si	si	si
,	,	,
cs	cs	c
:	:	:
srcptr	srcptr	srcptr

mov	mov	mov
di	di	di
,	,	,
cs	cs	c
:	:	:
desptr	desptr	desptr

mov	mov	mov
cs	cs	c
:	:	:
srcptr	srcptr	srcptr
,	,	,
di	di	di

mov	mov	mov
cs	cs	c
:	:	:
desptr	desptr	desptr
,	,	,
si	si	si

push	push	push
si	si	si

push	push	push
di	di	di

call	call	call
scanfirstline	scanfirstlin	scanfirstline

pop	pop	pop
di	di	di

pop	pop	pop
si	si	si

add	add	add
si	si	si
,	,	,
maxbyte	maxbyt	maxbyte

add	add	add
di	di	di
,	,	,
maxbyte	maxbyt	maxbyte

mov	mov	mov
cx	cx	cx
,	,	,
lineno	lineno	lineno
-	-	-
2	2	2
;	;	;
dont	dont	dont
scan	scan	scan
first	first	first
and	and	and
last	last	last
l1	l1	l1
:	:	:

push	push	push
si	si	si

push	push	push
di	di	di

push	push	push
cx	cx	cx

call	call	call
scanonemiddleline	scanonemiddlelin	scanonemiddleline

pop	pop	pop
cx	cx	cx

pop	pop	pop
di	di	di

pop	pop	pop
si	si	si

add	add	add
si	si	si
,	,	,
maxbyte	maxbyt	maxbyte

add	add	add
di	di	di
,	,	,
maxbyte	maxbyt	maxbyte

loop	loop	loop
l1	l1	l1

push	push	push
si	si	si

push	push	push
di	di	di

call	call	call
scanlastline	scanlastlin	scanlastline

pop	pop	pop
si	si	si

pop	pop	pop
di	di	di
l3	l3	l3
:	:	:

ret	ret	ret

;	;	;
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-

;	;	;

;	;	;
iterate	iter	iterate
hpp	hpp	hpp
rule	rule	rule
cx	cx	cx
times	time	time

;	;	;
iterate	iter	iterate
:	:	:

push	push	push
cx	cx	cx

call	call	call
iterateonce	iterateonc	iterateonce

pop	pop	pop
cx	cx	cx

call	call	call
showgas	showga	showgas

loop	loop	loop
iterate	iter	iterate

ret	ret	ret

;	;	;
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-
-	-	-

;	;	;

;	;	;
iterate	iter	iterate
hpp	hpp	hpp
rule	rule	rule
cx	cx	cx
times	time	time

;	;	;
iterateuntil	iterateuntil	iterateuntil
:	:	:

mov	mov	mov
si	si	si
,	,	,
0	0	0

mov	mov	mov
cx	cx	cx
,	,	,
offset	offset	offset
iu4	iu4	iu4
-	-	-
offset	offset	offset
iu3	iu3	iu3
iu00	iu00	iu00
:	:	:

mov	mov	mov
al	al	al
,	,	,
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
offset	offset	offset
iu3	iu3	iu3
]	]	]

xor	xor	xor
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
offset	offset	offset
iu4	iu4	iu4
]	]	]
,	,	,
al	al	al

inc	inc	inc
si	si	si

loop	loop	loop
iu00	iu00	iu00
iu0	iu0	iu0
:	:	:

call	call	call
iterateonce	iterateonc	iterateonce

call	call	call
showgas	showga	showgas

mov	mov	mov
si	si	si
,	,	,
cs	cs	c
:	:	:
srcptr	srcptr	srcptr

mov	mov	mov
cx	cx	cx
,	,	,
maxbyte	maxbyt	maxbyte
*	*	*
3	3	3

mov	mov	mov
bx	bx	bx
,	,	,
0	0	0

mov	mov	mov
ah	ah	ah
,	,	,
0	0	0

mov	mov	mov
al	al	al
,	,	,
255	255	255
iu1	iu1	iu1
:	:	:

mov	mov	mov
bl	bl	bl
,	,	,
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
si	si	si
]	]	]

mov	mov	mov
dl	dl	dl
,	,	,
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
bx	bx	bx
+	+	+
wallrule	wallrul	wallrule
]	]	]

not	not	not
ah	ah	ah

xor	xor	xor
dl	dl	dl
,	,	,
ah	ah	ah

and	and	and
al	al	al
,	,	,
dl	dl	dl

inc	inc	inc
si	si	si

loop	loop	loop
iu1	iu1	iu1

mov	mov	mov
si	si	si
,	,	,
0	0	0

mov	mov	mov
cx	cx	cx
,	,	,
offset	offset	offset
iu4	iu4	iu4
-	-	-
offset	offset	offset
iu3	iu3	iu3
iu2	iu2	iu2
:	:	:

mov	mov	mov
ah	ah	ah
,	,	,
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
offset	offset	offset
iu4	iu4	iu4
]	]	]

and	and	and
ah	ah	ah
,	,	,
al	al	al

xor	xor	xor
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
si	si	si
+	+	+
offset	offset	offset
iu3	iu3	iu3
]	]	]
,	,	,
ah	ah	ah

inc	inc	inc
si	si	si

loop	loop	loop
iu2	iu2	iu2

jmp	jmp	jmp
iu3	iu3	iu3
iu3	iu3	iu3
:	:	:

mov	mov	mov
ax	ax	ax
,	,	,
offset	offset	offset
iu0	iu0	iu0

push	push	push
ax	ax	ax

ret	ret	ret

db	db	db
256	256	256
dup	dup	dup
(	(	(
90h	90h	90h
)	)	)
iu4	iu4	iu4
:	:	:

push	push	push
ax	ax	ax

push	push	push
bx	bx	bx

push	push	push
cx	cx	cx

push	push	push
dx	dx	dx

push	push	push
ds	ds	d

mov	mov	mov
ah	ah	ah
,	,	,
9	9	9

mov	mov	mov
dx	dx	dx
,	,	,
cs	cs	c
:	:	:
msgptr	msgptr	msgptr

int	int	int
21h	21h	21h

pop	pop	pop
ds	ds	d

pop	pop	pop
dx	dx	dx

pop	pop	pop
cx	cx	cx

pop	pop	pop
bx	bx	bx

pop	pop	pop
ax	ax	ax

ret	ret	ret

db	db	db
512	512	512
dup	dup	dup
(	(	(
90h	90h	90h
)	)	)

msgptr	msgptr	msgptr
dw	dw	dw
offset	offset	offset
msg	msg	msg
msg	msg	msg
db	db	db
"	"	"
this	this	this
message	messag	message
is	is	is
printed	print	printed
out	out	out
by	by	by
"	"	"
,	,	,
10	10	10
,	,	,
13	13	13

db	db	db
"	"	"
code	code	code
decrypted	decrypt	decrypted
using	use	using
data	data	data
from	from	from
the	the	the
lattice	lattic	lattice
"	"	"
,	,	,
10	10	10
,	,	,
13	13	13

db	db	db
"	"	"
which	which	which
was	was	wa
applied	appli	applied
to	to	to
the	the	the
decoding	decod	decoding
routine	routin	routine
"	"	"
,	,	,
10	10	10
,	,	,
13	13	13

db	db	db
"	"	"
after	after	after
every	everi	every
time	time	time
step	step	step
"	"	"
,	,	,
10	10	10
,	,	,
13	13	13

db	db	db
"	"	"
the	the	the
decoding	decod	decoding
function	function	function
left	left	left
the	the	the
code	code	code
unchanged	unchang	unchanged
"	"	"
,	,	,
10	10	10
,	,	,
13	13	13

db	db	db
"	"	"
except	except	except
after	after	after
the	the	the
gas	gas	gas
evolution	evolut	evolution
had	had	had
completelly	completelli	completelly
"	"	"
,	,	,
10	10	10
,	,	,
13	13	13

db	db	db
"	"	"
reversed	revers	reversed
the	the	the
thermalization	thermal	thermalization
"	"	"
,	,	,
10	10	10
,	,	,
13	13	13
,	,	,
"	"	"
$	$	$
"	"	"

times	time	time
equ	equ	equ
16	16	16
;	;	;
256	256	256
repetitions	repetit	repetition
are	are	are
enough	enough	enough
to	to	to

;	;	;
"	"	"
equilibrate	equilibr	equilibrate
"	"	"
the	the	the
gas	gas	gas

begin	begin	begin
:	:	:

mov	mov	mov
ax	ax	ax
,	,	,
0600h	0600h	0600h

mov	mov	mov
bh	bh	bh
,	,	,
7	7	7

mov	mov	mov
dh	dh	dh
,	,	,
25	25	25

mov	mov	mov
dl	dl	dl
,	,	,
80	80	80

mov	mov	mov
cx	cx	cx
,	,	,
0	0	0

int	int	int
10h	10h	10h

mov	mov	mov
ah	ah	ah
,	,	,
2	2	2

mov	mov	mov
bh	bh	bh
,	,	,
0	0	0

mov	mov	mov
dh	dh	dh
,	,	,
24	24	24

mov	mov	mov
dl	dl	dl
,	,	,
0	0	0

int	int	int
10h	10h	10h

call	call	call
initgas	initga	initgas

call	call	call
showgas	showga	showgas

mov	mov	mov
ah	ah	ah
,	,	,
0	0	0

int	int	int
16h	16h	16h

push	push	push
cx	cx	cx

mov	mov	mov
cx	cx	cx
,	,	,
times	time	time

call	call	call
iterate	iter	iterate

call	call	call
invertall	invertal	invertall

call	call	call
showgas	showga	showgas

mov	mov	mov
ah	ah	ah
,	,	,
0	0	0

int	int	int
16h	16h	16h

cmp	cmp	cmp
al	al	al
,	,	,
"	"	"
0	0	0
"	"	"

jne	jne	jne
begin0	begin0	begin0

mov	mov	mov
si	si	si
,	,	,
cs	cs	c
:	:	:
srcptr	srcptr	srcptr

xor	xor	xor
byte	byte	byte
ptr	ptr	ptr
cs	cs	c
:	:	:
[	[	[
si	si	si
]	]	]
,	,	,
10000001b	10000001b	10000001b

begin0	begin0	begin0
:	:	:

mov	mov	mov
cx	cx	cx
,	,	,
times	time	time

call	call	call
iterateuntil	iterateuntil	iterateuntil

call	call	call
invertall	invertal	invertall

call	call	call
showgas	showga	showgas

mov	mov	mov
ax	ax	ax
,	,	,
4c00h	4c00h	4c00h

int	int	int
21h	21h	21h

code	code	code
ends	end	end

end	end	end
start	start	start