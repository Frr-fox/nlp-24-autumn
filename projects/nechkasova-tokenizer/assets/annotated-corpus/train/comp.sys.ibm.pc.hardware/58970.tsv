from	from	from
:	:	:
dejesus@eniac.seas.upenn.edu	dejesus@eniac.seas.upenn.edu	dejesus@eniac.seas.upenn.edu
(	(	(
cavalier	cavali	cavalier
)	)	)

subject	subject	subject
:	:	:
help	help	help
needed	need	needed

organization	organ	organization
:	:	:
university	univers	university
of	of	of
pennsylvania	pennsylvania	pennsylvania

lines	line	line
:	:	:
128	128	128

nntp	nntp	nntp
-	-	-
posting	post	posting
-	-	-
host	host	host
:	:	:
eniac	eniac	eniac
.	.	.
seas	sea	sea
.	.	.
upenn	upenn	upenn
.	.	.
edu	edu	edu

hello	hello	hello
.	.	.

i	i	i
hope	hope	hope
somebody	somebodi	somebody
out	out	out
here	here	here
can	can	can
help	help	help
me	me	me
.	.	.

i	i	i
am	am	am
currently	current	currently
working	work	working
on	on	on
a	a	a
project	project	project
where	where	where
i	i	i
am	am	am
trying	tri	trying
to	to	to
communicate	communic	communicate
from	from	from
an	an	an
ibm	ibm	ibm
386	386	386
with	with	with
phoenix	phoenix	phoenix
bios	bio	bios
,	,	,
using	use	using
c	c	c
+	+	+
+	+	+
,	,	,
to	to	to
a	a	a
board	board	board
that	that	that
i	i	i
made	made	made
with	with	with
an	an	an
intel	intel	intel
8085	8085	8085
cpu	cpu	cpu
with	with	with
uart	uart	uart
chip	chip	chip
.	.	.

the	the	the
board	board	board
works	work	work
fine	fine	fine
with	with	with
the	the	the
transmit	transmit	transmit
command	command	command
and	and	and
terminal	termin	terminal
emulation	emul	emulation
mode	mode	mode
of	of	of
kermit	kermit	kermit
,	,	,
but	but	but
there	there	there
seems	seem	seems
to	to	to
be	be	be
something	someth	something
wrong	wrong	wrong
with	with	with
the	the	the
initialization	initi	initialization
or	or	or
protocol	protocol	protocol
used	use	used
when	when	when
i	i	i
try	tri	try
c	c	c
+	+	+
+	+	+
.	.	.

i	i	i
need	need	need
to	to	to
access	access	access
the	the	the
unit	unit	unit
i	i	i
built	built	built
using	use	using
c	c	c
,	,	,
because	becaus	because
i	i	i
have	have	have
a	a	a
sizable	sizabl	sizable
chunk	chunk	chunk
of	of	of
c	c	c
code	code	code
that	that	that
i	i	i
will	will	will
be	be	be
using	use	using
to	to	to
perform	perform	perform
calculations	calcul	calculation
and	and	and
operations	oper	operation
that	that	that
will	will	will
be	be	be
very	veri	very
difficult	difficult	difficult
to	to	to
code	code	code
in	in	in
assembly	assembl	assembly
language	languag	language
for	for	for
the	the	the
8085	8085	8085
.	.	.

i	i	i
have	have	have
included	includ	included
the	the	the
assembly	assembl	assembly
code	code	code
that	that	that
i	i	i
am	am	am
running	run	running
and	and	and
the	the	the
c	c	c
+	+	+
+	+	+
code	code	code
that	that	that
i	i	i
am	am	am
trying	tri	trying
to	to	to
use	use	use
.	.	.

if	if	if
anyone	anyon	anyone
can	can	can
show	show	show
me	me	me
something	someth	something
that	that	that
i	i	i
am	am	am
doing	do	doing
blatantly	blatant	blatantly
incorrectly	incorrect	incorrectly
or	or	or
that	that	that
i	i	i
am	am	am
missing	miss	missing
because	becaus	because
of	of	of
my	my	my
lack	lack	lack
of	of	of
knowledge	knowledg	knowledge
about	about	about
rs	rs	r
-	-	-
232	232	232
serial	serial	serial
communications	communic	communication
,	,	,
please	pleas	please
e	e	e
-	-	-
mail	mail	mail
me	me	me
.	.	.

i	i	i
wrote	wrote	wrote
the	the	the
assembly	assembl	assembly
language	languag	language
to	to	to
wait	wait	wait
for	for	for
a	a	a
character	charact	character
to	to	to
be	be	be
received	receiv	received
and	and	and
then	then	then
to	to	to
check	check	check
it	it	it
against	against	against
the	the	the
0x20	0x20	0x20
character	charact	character
,	,	,
if	if	if
a	a	a
0x20	0x20	0x20
is	is	is
received	receiv	received
,	,	,
the	the	the
leds	led	led
will	will	will
indicate	indic	indicate
this	this	this
.	.	.

two	two	two
c	c	c
+	+	+
+	+	+
programs	program	program
that	that	that
i	i	i
have	have	have
written	written	written
do	do	do
nothing	noth	nothing
,	,	,
but	but	but
set	set	set
up	up	up
com	com	com
port	port	port
2	2	2
and	and	and
send	send	send
the	the	the
0x20	0x20	0x20
character	charact	character
.	.	.

one	one	one
uses	use	us
the	the	the
bioscom	bioscom	bioscom
(	(	(
)	)	)
function	function	function
in	in	in
bios	bio	bios
.	.	.
h	h	h
the	the	the
other	other	other
uses	use	us
the	the	the
software	softwar	software
interrupt	interrupt	interrupt
int86	int86	int86
(	(	(
)	)	)
function	function	function
in	in	in
dos	dos	do
.	.	.
h	h	h
.	.	.
i	i	i
have	have	have
triple	tripl	triple
checked	check	checked
the	the	the
baud	baud	baud
rate	rate	rate
(	(	(
2400	2400	2400
)	)	)
the	the	the
parity	pariti	parity
(	(	(
none	none	none
)	)	)
the	the	the
stop	stop	stop
bits	bit	bit
(	(	(
1	1	1
)	)	)
the	the	the
character	charact	character
length	length	length
(	(	(
8	8	8
bits	bit	bit
)	)	)
and	and	and
the	the	the
interrupt	interrupt	interrupt
calls	call	call
for	for	for
(	(	(
0x14	0x14	0x14
)	)	)
.	.	.

currently	current	currently
,	,	,
i	i	i
am	am	am
at	at	at
a	a	a
loss	loss	loss
as	as	a
to	to	to
what	what	what
may	may	may
be	be	be
wrong	wrong	wrong
.	.	.

any	ani	any
hardware	hardwar	hardware
gurus	gurus	guru
out	out	out
there	there	there
want	want	want
to	to	to
comment	comment	comment
?	?	?

thanks	thank	thanks
alot	alot	alot
,	,	,
hubert	hubert	hubert
de	de	de
jesus	jesus	jesus

dejesus@eniac.seas.upenn.edu	dejesus@eniac.seas.upenn.edu	dejesus@eniac.seas.upenn.edu

intel	intel	intel
asm	asm	asm

command	command	command
equ	equ	equ
3000h	3000h	3000h
;	;	;
command	command	command
register	regist	register
on	on	on
8155	8155	8155
porta	porta	porta
equ	equ	equ
3001h	3001h	3001h
;	;	;
port	port	port
a	a	a
on	on	on
8155	8155	8155
timerlo	timerlo	timerlo
equ	equ	equ
3004h	3004h	3004h
;	;	;
high	high	high
8	8	8
bits	bit	bit
of	of	of
8155	8155	8155
timer	timer	timer
timerhi	timerhi	timerhi
equ	equ	equ
3005h	3005h	3005h
;	;	;
low	low	low
8	8	8
bits	bit	bit
of	of	of
8155	8155	8155
timer	timer	timer
uartdata	uartdata	uartdata
equ	equ	equ
e000h	e000h	e000h
;	;	;
uart	uart	uart
data	data	data
register	regist	register
uartcmd	uartcmd	uartcmd
equ	equ	equ
e001h	e001h	e001h
;	;	;
uart	uart	uart
command	command	command
register	regist	register

org	org	org
4000h	4000h	4000h
;	;	;
sram	sram	sram
location	locat	location

mvi	mvi	mvi
a	a	a
,	,	,
08h	08h	08h
;	;	;
set	set	set
low	low	low
timer	timer	timer
bits	bit	bit

sta	sta	sta
timerlo	timerlo	timerlo

mvi	mvi	mvi
a	a	a
,	,	,
40h	40h	40h
;	;	;
set	set	set
high	high	high
timer	timer	timer
bits	bit	bit

sta	sta	sta
timerhi	timerhi	timerhi

mvi	mvi	mvi
a	a	a
,	,	,
11111101b	11111101b	11111101b
;	;	;
start	start	start
timer	timer	timer
&	&	&
enable	enabl	enable
port	port	port
a	a	a

sta	sta	sta
command	command	command

mvi	mvi	mvi
a	a	a
,	,	,
11h	11h	11h
;	;	;
display	display	display
11	11	11
on	on	on
7	7	7
-	-	-
segment	segment	segment
leds	led	led

sta	sta	sta
porta	porta	porta

mvi	mvi	mvi
a	a	a
,	,	,
00h	00h	00h
;	;	;
clear	clear	clear
uart	uart	uart
command	command	command

sta	sta	sta
uartcmd	uartcmd	uartcmd

sta	sta	sta
uartcmd	uartcmd	uartcmd

sta	sta	sta
uartcmd	uartcmd	uartcmd

mvi	mvi	mvi
a	a	a
,	,	,
01000000b	01000000b	01000000b
;	;	;
internally	intern	internally
reset	reset	reset
uart	uart	uart

sta	sta	sta
uartcmd	uartcmd	uartcmd

lda	lda	lda
uartdata	uartdata	uartdata
;	;	;
remove	remov	remove
extraneous	extran	extraneous
data	data	data

mvi	mvi	mvi
a	a	a
,	,	,
01001111b	01001111b	01001111b
;	;	;
init	init	init
uart	uart	uart
for	for	for
8	8	8
data	data	data
bits	bit	bit
,	,	,
sta	sta	sta
uartcmd	uartcmd	uartcmd
;	;	;
no	no	no
parity	pariti	parity
,	,	,
1	1	1
stop	stop	stop
bit	bit	bit
,	,	,
64x	64x	64x
async	async	async

mvi	mvi	mvi
a	a	a
,	,	,
00100111b	00100111b	00100111b
;	;	;
enable	enabl	enable
transmit	transmit	transmit
and	and	and
receive	receiv	receive

sta	sta	sta
uartcmd	uartcmd	uartcmd

init	init	init
:	:	:
lda	lda	lda
uartcmd	uartcmd	uartcmd
;	;	;
read	read	read
status	status	status
register	regist	register

ani	ani	ani
02h	02h	02h
;	;	;
is	is	is
rxrdy	rxrdi	rxrdy
?	?	?

jz	jz	jz
init	init	init
;	;	;
no	no	no
,	,	,
loop	loop	loop

lda	lda	lda
uartdata	uartdata	uartdata
;	;	;
read	read	read
data	data	data
character	charact	character

cpi	cpi	cpi
'	'	'
'	'	'
;	;	;
is	is	is
character	charact	character
=	=	=
0x20	0x20	0x20
?	?	?

jnz	jnz	jnz
init	init	init
;	;	;
no	no	no
,	,	,
loop	loop	loop

mvi	mvi	mvi
a	a	a
,	,	,
22h	22h	22h
;	;	;
character	charact	character
received	receiv	received
,	,	,

sta	sta	sta
porta	porta	porta
;	;	;
display	display	display
22	22	22
on	on	on
7	7	7
-	-	-
segment	segment	segment
leds	led	led

hlt	hlt	hlt

end	end	end

c	c	c
+	+	+
+	+	+
using	use	using
bioscom	bioscom	bioscom
(	(	(
)	)	)

#	#	#
include	includ	include
<	<	<
stdio	stdio	stdio
.	.	.
h	h	h
>	>	>

#	#	#
include	includ	include
<	<	<
stdlib	stdlib	stdlib
.	.	.
h	h	h
>	>	>

#	#	#
include	includ	include
<	<	<
bios	bio	bios
.	.	.
h	h	h
>	>	>

#	#	#
define	defin	define
init	init	init
0	0	0

#	#	#
define	defin	define
send	send	send
1	1	1

#	#	#
define	defin	define
receive	receiv	receive
2	2	2

#	#	#
define	defin	define
status	status	status
3	3	3

#	#	#
define	defin	define
com2	com2	com2
1	1	1

void	void	void
main	main	main
(	(	(
)	)	)

{	{	{

char	char	char
abyte	abyt	abyte
;	;	;

abyte	abyt	abyte
=	=	=
0xa3	0xa3	0xa3
;	;	;

bioscom	bioscom	bioscom
(	(	(
init	init	init
,	,	,
abyte	abyt	abyte
,	,	,
com2	com2	com2
)	)	)
;	;	;

printf	printf	printf
(	(	(
"	"	"
initialized	initi	initialized
comm	comm	comm
port	port	port
2	2	2
\	\	\
n	n	n
"	"	"
)	)	)
;	;	;

while	while	while
(	(	(
!	!	!
(	(	(
bioscom	bioscom	bioscom
(	(	(
status	status	status
,	,	,
0	0	0
,	,	,
com2	com2	com2
)	)	)
&	&	&
0x4000	0x4000	0x4000
)	)	)
)	)	)

;	;	;

abyte	abyt	abyte
=	=	=
'	'	'
'	'	'
;	;	;

bioscom	bioscom	bioscom
(	(	(
send	send	send
,	,	,
abyte	abyt	abyte
,	,	,
com2	com2	com2
)	)	)
;	;	;

printf	printf	printf
(	(	(
"	"	"
sent	sent	sent
start	start	start
character	charact	character
\	\	\
n	n	n
"	"	"
)	)	)
;	;	;

}	}	}

c	c	c
+	+	+
+	+	+
using	use	using
int86	int86	int86
(	(	(
)	)	)

#	#	#
include	includ	include
<	<	<
stdio	stdio	stdio
.	.	.
h	h	h
>	>	>

#	#	#
include	includ	include
<	<	<
stdlib	stdlib	stdlib
.	.	.
h	h	h
>	>	>

#	#	#
include	includ	include
<	<	<
dos	dos	do
.	.	.
h	h	h
>	>	>

#	#	#
include	includ	include
<	<	<
bios	bio	bios
.	.	.
h	h	h
>	>	>

main	main	main
(	(	(
)	)	)

{	{	{

union	union	union
regs	reg	regs
registers	regist	register
;	;	;

registers	regist	register
.	.	.
h	h	h
.	.	.
ah	ah	ah
=	=	=
0x00	0x00	0x00
;	;	;

registers	regist	register
.	.	.
h	h	h
.	.	.
al	al	al
=	=	=
0xa7	0xa7	0xa7
;	;	;

registers	regist	register
.	.	.
x	x	x
.	.	.
dx	dx	dx
=	=	=
0x01	0x01	0x01
;	;	;

int86	int86	int86
(	(	(
0x14	0x14	0x14
,	,	,
&	&	&
registers	regist	register
,	,	,
&	&	&
registers	regist	register
)	)	)
;	;	;

printf	printf	printf
(	(	(
"	"	"
com2	com2	com2
initialized	initi	initialized
\	\	\
n	n	n
"	"	"
)	)	)
;	;	;

registers	regist	register
.	.	.
h	h	h
.	.	.
ah	ah	ah
=	=	=
0x01	0x01	0x01
;	;	;

registers	regist	register
.	.	.
h	h	h
.	.	.
al	al	al
=	=	=
0x20	0x20	0x20
;	;	;

registers	regist	register
.	.	.
x	x	x
.	.	.
dx	dx	dx
=	=	=
0x01	0x01	0x01
;	;	;

int86	int86	int86
(	(	(
0x14	0x14	0x14
,	,	,
&	&	&
registers	regist	register
,	,	,
&	&	&
registers	regist	register
)	)	)
;	;	;

printf	printf	printf
(	(	(
"	"	"
sent	sent	sent
start	start	start
character	charact	character
\	\	\
n	n	n
"	"	"
)	)	)
;	;	;

}	}	}